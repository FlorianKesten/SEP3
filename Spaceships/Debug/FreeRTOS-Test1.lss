
FreeRTOS-Test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004e  00800100  00001e78  00001f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004a0  0080014e  0080014e  00001f5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000460  00000000  00000000  00001fcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000549f  00000000  00000000  0000242c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000015e4  00000000  00000000  000078cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002dd2  00000000  00000000  00008eaf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000e50  00000000  00000000  0000bc84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b45  00000000  00000000  0000cad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053fb  00000000  00000000  0000e619  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004c0  00000000  00000000  00013a14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 36 01 	jmp	0x26c	; 0x26c <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 df 04 	jmp	0x9be	; 0x9be <__vector_20>
      54:	0c 94 1d 05 	jmp	0xa3a	; 0xa3a <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 65 05 	jmp	0xaca	; 0xaca <__vector_28>
      74:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e8 e7       	ldi	r30, 0x78	; 120
      90:	fe e1       	ldi	r31, 0x1E	; 30
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	ae 34       	cpi	r26, 0x4E	; 78
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	25 e0       	ldi	r18, 0x05	; 5
      a0:	ae e4       	ldi	r26, 0x4E	; 78
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 3e       	cpi	r26, 0xEE	; 238
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <main>
      b2:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <another_task>:
// frame_buf contains a bit pattern for each column in the display
static uint16_t frame_buf[14] = {1, 1, 28, 62, 126, 254, 508, 254, 126, 62, 28, 0, 0, 0};

//-----------------------------------------
void another_task(void *pvParameters)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	1f 92       	push	r1
      c0:	cd b7       	in	r28, 0x3d	; 61
      c2:	de b7       	in	r29, 0x3e	; 62
	// The parameters are not used
	( void ) pvParameters;

	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 2 );
      c4:	62 e0       	ldi	r22, 0x02	; 2
      c6:	70 e0       	ldi	r23, 0x00	; 0
      c8:	80 e0       	ldi	r24, 0x00	; 0
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 15 0c 	call	0x182a	; 0x182a <vTaskSetApplicationTaskTag>
	BaseType_t result = 0;
	uint8_t byte;
	
	while(1)
	{
		result = xQueueReceive(_x_com_received_chars_queue, &byte, 1000L);
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	48 ee       	ldi	r20, 0xE8	; 232
      d4:	53 e0       	ldi	r21, 0x03	; 3
      d6:	be 01       	movw	r22, r28
      d8:	6f 5f       	subi	r22, 0xFF	; 255
      da:	7f 4f       	sbci	r23, 0xFF	; 255
      dc:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_x_com_received_chars_queue>
      e0:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_x_com_received_chars_queue+0x1>
      e4:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueGenericReceive>
		
		if (result) {
      e8:	88 23       	and	r24, r24
      ea:	31 f0       	breq	.+12     	; 0xf8 <another_task+0x3e>
			com_send_bytes(&byte, 1);
      ec:	61 e0       	ldi	r22, 0x01	; 1
      ee:	ce 01       	movw	r24, r28
      f0:	01 96       	adiw	r24, 0x01	; 1
      f2:	0e 94 5f 01 	call	0x2be	; 0x2be <com_send_bytes>
      f6:	ec cf       	rjmp	.-40     	; 0xd0 <another_task+0x16>
		}else {
			com_send_bytes((uint8_t*)"TO", 2);
      f8:	62 e0       	ldi	r22, 0x02	; 2
      fa:	8a e0       	ldi	r24, 0x0A	; 10
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 5f 01 	call	0x2be	; 0x2be <com_send_bytes>
     102:	e6 cf       	rjmp	.-52     	; 0xd0 <another_task+0x16>

00000104 <startup_task>:
	// The parameters are not used
	( void ) pvParameters;

	#if (configUSE_APPLICATION_TASK_TAG == 1)
	// Set task no to be used for tracing with R2R-Network
	vTaskSetApplicationTaskTag( NULL, ( void * ) 1 );
     104:	61 e0       	ldi	r22, 0x01	; 1
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 15 0c 	call	0x182a	; 0x182a <vTaskSetApplicationTaskTag>
	#endif
	
	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	61 e0       	ldi	r22, 0x01	; 1
     114:	8e e1       	ldi	r24, 0x1E	; 30
     116:	0e 94 ee 06 	call	0xddc	; 0xddc <xQueueGenericCreate>
     11a:	90 93 50 01 	sts	0x0150, r25	; 0x800150 <_x_com_received_chars_queue+0x1>
     11e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <_x_com_received_chars_queue>
	init_com(_x_com_received_chars_queue);
     122:	0e 94 1f 01 	call	0x23e	; 0x23e <init_com>
	
	// Initialise Mutex
	xMutex = xSemaphoreCreateMutex();
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	0e 94 c0 07 	call	0xf80	; 0xf80 <xQueueCreateMutex>
	
	// Initialization of tasks etc. can be done here
	BaseType_t t1 = xTaskCreate(another_task, (const char *)"Another", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     12c:	e1 2c       	mov	r14, r1
     12e:	f1 2c       	mov	r15, r1
     130:	00 e0       	ldi	r16, 0x00	; 0
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	30 e0       	ldi	r19, 0x00	; 0
     136:	45 e5       	ldi	r20, 0x55	; 85
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	6d e0       	ldi	r22, 0x0D	; 13
     13c:	71 e0       	ldi	r23, 0x01	; 1
     13e:	8d e5       	ldi	r24, 0x5D	; 93
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 43 09 	call	0x1286	; 0x1286 <xTaskCreate>

	
	// Lets send a start message to the console
	com_send_bytes((uint8_t *)"Then we Start!\n", 15);
     146:	6f e0       	ldi	r22, 0x0F	; 15
     148:	85 e1       	ldi	r24, 0x15	; 21
     14a:	91 e0       	ldi	r25, 0x01	; 1
     14c:	0e 94 5f 01 	call	0x2be	; 0x2be <com_send_bytes>
	
	while(1)
	{
		vTaskDelay( 1000 );
     150:	88 ee       	ldi	r24, 0xE8	; 232
     152:	93 e0       	ldi	r25, 0x03	; 3
     154:	0e 94 c2 0b 	call	0x1784	; 0x1784 <vTaskDelay>
     158:	fb cf       	rjmp	.-10     	; 0x150 <startup_task+0x4c>

0000015a <prepare_shiftregister>:

// Prepare shift register setting SER = 1
void prepare_shiftregister()
{
	// Set SER to 1
	PORTD |= _BV(PORTD2);
     15a:	5a 9a       	sbi	0x0b, 2	; 11
     15c:	08 95       	ret

0000015e <clock_shift_register_and_prepare_for_next_col>:

// clock shift-register
void clock_shift_register_and_prepare_for_next_col()
{
	// one SCK pulse
	PORTD |= _BV(PORTD5);
     15e:	5d 9a       	sbi	0x0b, 5	; 11
	PORTD &= ~_BV(PORTD5);
     160:	5d 98       	cbi	0x0b, 5	; 11
	
	// one RCK pulse
	PORTD |= _BV(PORTD4);
     162:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD &= ~_BV(PORTD4);
     164:	5c 98       	cbi	0x0b, 4	; 11
	
	// Set SER to 0 - for next column
	PORTD &= ~_BV(PORTD2);
     166:	5a 98       	cbi	0x0b, 2	; 11
     168:	08 95       	ret

0000016a <load_col_value>:
}

// Load column value for column to show
void load_col_value(uint16_t col_value)
{
	PORTA = ~(col_value & 0xFF);
     16a:	80 95       	com	r24
     16c:	82 b9       	out	0x02, r24	; 2
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     16e:	85 b1       	in	r24, 0x05	; 5
     170:	83 60       	ori	r24, 0x03	; 3
     172:	85 b9       	out	0x05, r24	; 5
	PORTB &= ~((col_value >> 8) & 0x03);
     174:	85 b1       	in	r24, 0x05	; 5
     176:	93 70       	andi	r25, 0x03	; 3
     178:	90 95       	com	r25
     17a:	89 23       	and	r24, r25
     17c:	85 b9       	out	0x05, r24	; 5
     17e:	08 95       	ret

00000180 <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     180:	cf 93       	push	r28
	static uint8_t col = 0;
	
	if (col == 0)
     182:	c0 91 4e 01 	lds	r28, 0x014E	; 0x80014e <__data_end>
     186:	c1 11       	cpse	r28, r1
     188:	0c c0       	rjmp	.+24     	; 0x1a2 <handle_display+0x22>
	{
		prepare_shiftregister();
     18a:	0e 94 ad 00 	call	0x15a	; 0x15a <prepare_shiftregister>
	}
	
	load_col_value(frame_buf[col]);
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 b5 00 	call	0x16a	; 0x16a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     196:	0e 94 af 00 	call	0x15e	; 0x15e <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     19a:	81 e0       	ldi	r24, 0x01	; 1
     19c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <__data_end>
     1a0:	14 c0       	rjmp	.+40     	; 0x1ca <handle_display+0x4a>
	if (col == 0)
	{
		prepare_shiftregister();
	}
	
	load_col_value(frame_buf[col]);
     1a2:	ec 2f       	mov	r30, r28
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	ee 0f       	add	r30, r30
     1a8:	ff 1f       	adc	r31, r31
     1aa:	e3 5d       	subi	r30, 0xD3	; 211
     1ac:	fe 4f       	sbci	r31, 0xFE	; 254
     1ae:	80 81       	ld	r24, Z
     1b0:	91 81       	ldd	r25, Z+1	; 0x01
     1b2:	0e 94 b5 00 	call	0x16a	; 0x16a <load_col_value>
	
	clock_shift_register_and_prepare_for_next_col();
     1b6:	0e 94 af 00 	call	0x15e	; 0x15e <clock_shift_register_and_prepare_for_next_col>
	
	// count column up - prepare for next
	col++;
     1ba:	cf 5f       	subi	r28, 0xFF	; 255
	if (col > 13)
     1bc:	ce 30       	cpi	r28, 0x0E	; 14
     1be:	18 f4       	brcc	.+6      	; 0x1c6 <handle_display+0x46>
	load_col_value(frame_buf[col]);
	
	clock_shift_register_and_prepare_for_next_col();
	
	// count column up - prepare for next
	col++;
     1c0:	c0 93 4e 01 	sts	0x014E, r28	; 0x80014e <__data_end>
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <handle_display+0x4a>
	if (col > 13)
	{
		col = 0;
     1c6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <__data_end>
	}
}
     1ca:	cf 91       	pop	r28
     1cc:	08 95       	ret

000001ce <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     1ce:	08 95       	ret

000001d0 <main>:

//-----------------------------------------
int main(void)
{
	
	init_board();
     1d0:	0e 94 68 01 	call	0x2d0	; 0x2d0 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     1d4:	5e 98       	cbi	0x0b, 6	; 11
	
	//Create task to blink gpio
	BaseType_t t1 = xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     1d6:	e1 2c       	mov	r14, r1
     1d8:	f1 2c       	mov	r15, r1
     1da:	00 e0       	ldi	r16, 0x00	; 0
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	45 e5       	ldi	r20, 0x55	; 85
     1e2:	50 e0       	ldi	r21, 0x00	; 0
     1e4:	65 e2       	ldi	r22, 0x25	; 37
     1e6:	71 e0       	ldi	r23, 0x01	; 1
     1e8:	82 e8       	ldi	r24, 0x82	; 130
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 43 09 	call	0x1286	; 0x1286 <xTaskCreate>

	// Start the display handler timer
	init_display_timer(handle_display);
     1f0:	80 ec       	ldi	r24, 0xC0	; 192
     1f2:	90 e0       	ldi	r25, 0x00	; 0
     1f4:	0e 94 24 01 	call	0x248	; 0x248 <init_display_timer>
	
	sei();
     1f8:	78 94       	sei
	
	//Start the scheduler
	vTaskStartScheduler();
     1fa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <vTaskStartScheduler>
     1fe:	ff cf       	rjmp	.-2      	; 0x1fe <main+0x2e>

00000200 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	00 d0       	rcall	.+0      	; 0x206 <_com_call_back+0x6>
     206:	cd b7       	in	r28, 0x3d	; 61
     208:	de b7       	in	r29, 0x3e	; 62
     20a:	6a 83       	std	Y+2, r22	; 0x02
	if (_x_rx_com_queue) {
     20c:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <_x_rx_com_queue>
     210:	90 91 9a 01 	lds	r25, 0x019A	; 0x80019a <_x_rx_com_queue+0x1>
     214:	00 97       	sbiw	r24, 0x00	; 0
     216:	71 f0       	breq	.+28     	; 0x234 <_com_call_back+0x34>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     218:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
     21a:	20 e0       	ldi	r18, 0x00	; 0
     21c:	ae 01       	movw	r20, r28
     21e:	4f 5f       	subi	r20, 0xFF	; 255
     220:	5f 4f       	sbci	r21, 0xFF	; 255
     222:	be 01       	movw	r22, r28
     224:	6e 5f       	subi	r22, 0xFE	; 254
     226:	7f 4f       	sbci	r23, 0xFF	; 255
     228:	0e 94 da 07 	call	0xfb4	; 0xfb4 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	81 11       	cpse	r24, r1
		{
			taskYIELD();
     230:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
		}
	}
}
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	08 95       	ret

0000023e <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
	_x_rx_com_queue = x_rx_queue;
     23e:	90 93 9a 01 	sts	0x019A, r25	; 0x80019a <_x_rx_com_queue+0x1>
     242:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <_x_rx_com_queue>
     246:	08 95       	ret

00000248 <init_display_timer>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
	cb_ptr = cb;
     248:	90 93 98 01 	sts	0x0198, r25	; 0x800198 <cb_ptr+0x1>
     24c:	80 93 97 01 	sts	0x0197, r24	; 0x800197 <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     250:	8a e0       	ldi	r24, 0x0A	; 10
     252:	87 bd       	out	0x27, r24	; 39
	TCCR0A |= _BV(WGM01); // Mode 2
     254:	84 b5       	in	r24, 0x24	; 36
     256:	82 60       	ori	r24, 0x02	; 2
     258:	84 bd       	out	0x24, r24	; 36
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     25a:	ee e6       	ldi	r30, 0x6E	; 110
     25c:	f0 e0       	ldi	r31, 0x00	; 0
     25e:	80 81       	ld	r24, Z
     260:	82 60       	ori	r24, 0x02	; 2
     262:	80 83       	st	Z, r24
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     264:	85 b5       	in	r24, 0x25	; 37
     266:	85 60       	ori	r24, 0x05	; 5
     268:	85 bd       	out	0x25, r24	; 37
     26a:	08 95       	ret

0000026c <__vector_16>:
}

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     26c:	1f 92       	push	r1
     26e:	0f 92       	push	r0
     270:	0f b6       	in	r0, 0x3f	; 63
     272:	0f 92       	push	r0
     274:	11 24       	eor	r1, r1
     276:	2f 93       	push	r18
     278:	3f 93       	push	r19
     27a:	4f 93       	push	r20
     27c:	5f 93       	push	r21
     27e:	6f 93       	push	r22
     280:	7f 93       	push	r23
     282:	8f 93       	push	r24
     284:	9f 93       	push	r25
     286:	af 93       	push	r26
     288:	bf 93       	push	r27
     28a:	ef 93       	push	r30
     28c:	ff 93       	push	r31
	if (cb_ptr)
     28e:	e0 91 97 01 	lds	r30, 0x0197	; 0x800197 <cb_ptr>
     292:	f0 91 98 01 	lds	r31, 0x0198	; 0x800198 <cb_ptr+0x1>
     296:	30 97       	sbiw	r30, 0x00	; 0
     298:	09 f0       	breq	.+2      	; 0x29c <__vector_16+0x30>
	{
		cb_ptr();
     29a:	09 95       	icall
	}
}
     29c:	ff 91       	pop	r31
     29e:	ef 91       	pop	r30
     2a0:	bf 91       	pop	r27
     2a2:	af 91       	pop	r26
     2a4:	9f 91       	pop	r25
     2a6:	8f 91       	pop	r24
     2a8:	7f 91       	pop	r23
     2aa:	6f 91       	pop	r22
     2ac:	5f 91       	pop	r21
     2ae:	4f 91       	pop	r20
     2b0:	3f 91       	pop	r19
     2b2:	2f 91       	pop	r18
     2b4:	0f 90       	pop	r0
     2b6:	0f be       	out	0x3f, r0	; 63
     2b8:	0f 90       	pop	r0
     2ba:	1f 90       	pop	r1
     2bc:	18 95       	reti

000002be <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     2be:	46 2f       	mov	r20, r22
	serial_send_bytes(_com_serial_instance, bytes, len);
     2c0:	bc 01       	movw	r22, r24
     2c2:	80 91 9b 01 	lds	r24, 0x019B	; 0x80019b <_com_serial_instance>
     2c6:	90 91 9c 01 	lds	r25, 0x019C	; 0x80019c <_com_serial_instance+0x1>
     2ca:	0e 94 9c 04 	call	0x938	; 0x938 <serial_send_bytes>
     2ce:	08 95       	ret

000002d0 <init_board>:
}

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	0f 93       	push	r16
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     2e0:	84 e7       	ldi	r24, 0x74	; 116
     2e2:	91 e0       	ldi	r25, 0x01	; 1
     2e4:	0e 94 c1 01 	call	0x382	; 0x382 <buffer_init>
	buffer_init(&_com_tx_buffer);
     2e8:	81 e5       	ldi	r24, 0x51	; 81
     2ea:	91 e0       	ldi	r25, 0x01	; 1
     2ec:	0e 94 c1 01 	call	0x382	; 0x382 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     2f0:	0f 2e       	mov	r0, r31
     2f2:	f0 e0       	ldi	r31, 0x00	; 0
     2f4:	8f 2e       	mov	r8, r31
     2f6:	f1 e0       	ldi	r31, 0x01	; 1
     2f8:	9f 2e       	mov	r9, r31
     2fa:	f0 2d       	mov	r31, r0
     2fc:	0f 2e       	mov	r0, r31
     2fe:	f1 e5       	ldi	r31, 0x51	; 81
     300:	af 2e       	mov	r10, r31
     302:	f1 e0       	ldi	r31, 0x01	; 1
     304:	bf 2e       	mov	r11, r31
     306:	f0 2d       	mov	r31, r0
     308:	0f 2e       	mov	r0, r31
     30a:	f4 e7       	ldi	r31, 0x74	; 116
     30c:	cf 2e       	mov	r12, r31
     30e:	f1 e0       	ldi	r31, 0x01	; 1
     310:	df 2e       	mov	r13, r31
     312:	f0 2d       	mov	r31, r0
     314:	e1 2c       	mov	r14, r1
     316:	00 e0       	ldi	r16, 0x00	; 0
     318:	23 e0       	ldi	r18, 0x03	; 3
     31a:	40 e0       	ldi	r20, 0x00	; 0
     31c:	52 ec       	ldi	r21, 0xC2	; 194
     31e:	61 e0       	ldi	r22, 0x01	; 1
     320:	70 e0       	ldi	r23, 0x00	; 0
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 22 04 	call	0x844	; 0x844 <serial_new_instance>
     328:	90 93 9c 01 	sts	0x019C, r25	; 0x80019c <_com_serial_instance+0x1>
     32c:	80 93 9b 01 	sts	0x019B, r24	; 0x80019b <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     330:	88 b1       	in	r24, 0x08	; 8
     332:	83 6c       	ori	r24, 0xC3	; 195
     334:	88 b9       	out	0x08, r24	; 8
	PORTD |= _BV(PORTD3);
     336:	5b 9a       	sbi	0x0b, 3	; 11
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     338:	8a b1       	in	r24, 0x0a	; 10
     33a:	84 67       	ori	r24, 0x74	; 116
     33c:	8a b9       	out	0x0a, r24	; 10
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     33e:	5e 9a       	sbi	0x0b, 6	; 11
	
	// Column pins to output
	DDRA |= 0xFF;
     340:	81 b1       	in	r24, 0x01	; 1
     342:	8f ef       	ldi	r24, 0xFF	; 255
     344:	81 b9       	out	0x01, r24	; 1
	DDRB |= _BV(DDB0) | _BV(DDB1);
     346:	84 b1       	in	r24, 0x04	; 4
     348:	83 60       	ori	r24, 0x03	; 3
     34a:	84 b9       	out	0x04, r24	; 4
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	8c 63       	ori	r24, 0x3C	; 60
     350:	84 b9       	out	0x04, r24	; 4
}
     352:	0f 91       	pop	r16
     354:	ef 90       	pop	r14
     356:	df 90       	pop	r13
     358:	cf 90       	pop	r12
     35a:	bf 90       	pop	r11
     35c:	af 90       	pop	r10
     35e:	9f 90       	pop	r9
     360:	8f 90       	pop	r8
     362:	08 95       	ret

00000364 <switch_in>:
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
		PORTB &= 0b11000011;
     364:	95 b1       	in	r25, 0x05	; 5
     366:	93 7c       	andi	r25, 0xC3	; 195
     368:	95 b9       	out	0x05, r25	; 5
		PORTB |= task_no << 2;
     36a:	25 b1       	in	r18, 0x05	; 5
     36c:	34 e0       	ldi	r19, 0x04	; 4
     36e:	83 9f       	mul	r24, r19
     370:	c0 01       	movw	r24, r0
     372:	11 24       	eor	r1, r1
     374:	82 2b       	or	r24, r18
     376:	85 b9       	out	0x05, r24	; 5
     378:	08 95       	ret

0000037a <switch_out>:
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
		PORTB &= 0b11000011;
     37a:	85 b1       	in	r24, 0x05	; 5
     37c:	83 7c       	andi	r24, 0xC3	; 195
     37e:	85 b9       	out	0x05, r24	; 5
     380:	08 95       	ret

00000382 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     382:	fc 01       	movw	r30, r24
	buffer->in_i = 0;
     384:	10 a2       	std	Z+32, r1	; 0x20
	buffer->out_i = 0;
     386:	11 a2       	std	Z+33, r1	; 0x21
	buffer->no_in_buffer = 0;
     388:	12 a2       	std	Z+34, r1	; 0x22
     38a:	08 95       	ret

0000038c <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     38c:	fc 01       	movw	r30, r24
	if (buffer->no_in_buffer > 0) {
     38e:	82 a1       	ldd	r24, Z+34	; 0x22
     390:	88 23       	and	r24, r24
     392:	d9 f0       	breq	.+54     	; 0x3ca <buffer_get_item+0x3e>
		*item = buffer->storage[buffer->out_i];
     394:	81 a1       	ldd	r24, Z+33	; 0x21
     396:	df 01       	movw	r26, r30
     398:	a8 0f       	add	r26, r24
     39a:	b1 1d       	adc	r27, r1
     39c:	8c 91       	ld	r24, X
     39e:	db 01       	movw	r26, r22
     3a0:	8c 93       	st	X, r24
		buffer->out_i = INCREMENT(buffer->out_i);
     3a2:	21 a1       	ldd	r18, Z+33	; 0x21
     3a4:	30 e0       	ldi	r19, 0x00	; 0
     3a6:	2f 5f       	subi	r18, 0xFF	; 255
     3a8:	3f 4f       	sbci	r19, 0xFF	; 255
     3aa:	2f 71       	andi	r18, 0x1F	; 31
     3ac:	30 78       	andi	r19, 0x80	; 128
     3ae:	33 23       	and	r19, r19
     3b0:	34 f4       	brge	.+12     	; 0x3be <buffer_get_item+0x32>
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	31 09       	sbc	r19, r1
     3b6:	20 6e       	ori	r18, 0xE0	; 224
     3b8:	3f 6f       	ori	r19, 0xFF	; 255
     3ba:	2f 5f       	subi	r18, 0xFF	; 255
     3bc:	3f 4f       	sbci	r19, 0xFF	; 255
     3be:	21 a3       	std	Z+33, r18	; 0x21
		buffer->no_in_buffer--;
     3c0:	82 a1       	ldd	r24, Z+34	; 0x22
     3c2:	81 50       	subi	r24, 0x01	; 1
     3c4:	82 a3       	std	Z+34, r24	; 0x22
		return BUFFER_OK;
     3c6:	80 e0       	ldi	r24, 0x00	; 0
     3c8:	08 95       	ret
	}
	return BUFFER_EMPTY;
     3ca:	81 e0       	ldi	r24, 0x01	; 1
}
     3cc:	08 95       	ret

000003ce <buffer_put_item>:
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     3ce:	fc 01       	movw	r30, r24
     3d0:	42 a1       	ldd	r20, Z+34	; 0x22
     3d2:	40 32       	cpi	r20, 0x20	; 32
     3d4:	b8 f4       	brcc	.+46     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		buffer->storage[buffer->in_i] = item;
     3d6:	20 a1       	ldd	r18, Z+32	; 0x20
     3d8:	30 e0       	ldi	r19, 0x00	; 0
     3da:	e2 0f       	add	r30, r18
     3dc:	f3 1f       	adc	r31, r19
     3de:	60 83       	st	Z, r22
		buffer->in_i = INCREMENT(buffer->in_i);
     3e0:	2f 5f       	subi	r18, 0xFF	; 255
     3e2:	3f 4f       	sbci	r19, 0xFF	; 255
     3e4:	2f 71       	andi	r18, 0x1F	; 31
     3e6:	30 78       	andi	r19, 0x80	; 128
     3e8:	33 23       	and	r19, r19
     3ea:	34 f4       	brge	.+12     	; 0x3f8 <buffer_put_item+0x2a>
     3ec:	21 50       	subi	r18, 0x01	; 1
     3ee:	31 09       	sbc	r19, r1
     3f0:	20 6e       	ori	r18, 0xE0	; 224
     3f2:	3f 6f       	ori	r19, 0xFF	; 255
     3f4:	2f 5f       	subi	r18, 0xFF	; 255
     3f6:	3f 4f       	sbci	r19, 0xFF	; 255
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 a3       	std	Z+32, r18	; 0x20
		buffer->no_in_buffer++;
     3fc:	4f 5f       	subi	r20, 0xFF	; 255
     3fe:	42 a3       	std	Z+34, r20	; 0x22
		return BUFFER_OK;
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	08 95       	ret
	}
	return BUFFER_FULL;
     404:	82 e0       	ldi	r24, 0x02	; 2
}
     406:	08 95       	ret

00000408 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     408:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     40a:	03 96       	adiw	r24, 0x03	; 3
     40c:	92 83       	std	Z+2, r25	; 0x02
     40e:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     410:	2f ef       	ldi	r18, 0xFF	; 255
     412:	3f ef       	ldi	r19, 0xFF	; 255
     414:	34 83       	std	Z+4, r19	; 0x04
     416:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     418:	96 83       	std	Z+6, r25	; 0x06
     41a:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     41c:	90 87       	std	Z+8, r25	; 0x08
     41e:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     420:	10 82       	st	Z, r1
     422:	08 95       	ret

00000424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     424:	fc 01       	movw	r30, r24
     426:	11 86       	std	Z+9, r1	; 0x09
     428:	10 86       	std	Z+8, r1	; 0x08
     42a:	08 95       	ret

0000042c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
     430:	9c 01       	movw	r18, r24
     432:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     434:	dc 01       	movw	r26, r24
     436:	11 96       	adiw	r26, 0x01	; 1
     438:	cd 91       	ld	r28, X+
     43a:	dc 91       	ld	r29, X
     43c:	12 97       	sbiw	r26, 0x02	; 2
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     43e:	d3 83       	std	Z+3, r29	; 0x03
     440:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     442:	8c 81       	ldd	r24, Y+4	; 0x04
     444:	9d 81       	ldd	r25, Y+5	; 0x05
     446:	95 83       	std	Z+5, r25	; 0x05
     448:	84 83       	std	Z+4, r24	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     44a:	8c 81       	ldd	r24, Y+4	; 0x04
     44c:	9d 81       	ldd	r25, Y+5	; 0x05
     44e:	dc 01       	movw	r26, r24
     450:	13 96       	adiw	r26, 0x03	; 3
     452:	7c 93       	st	X, r23
     454:	6e 93       	st	-X, r22
     456:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     458:	7d 83       	std	Y+5, r23	; 0x05
     45a:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     45c:	31 87       	std	Z+9, r19	; 0x09
     45e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     460:	f9 01       	movw	r30, r18
     462:	80 81       	ld	r24, Z
     464:	8f 5f       	subi	r24, 0xFF	; 255
     466:	80 83       	st	Z, r24
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     474:	48 81       	ld	r20, Y
     476:	59 81       	ldd	r21, Y+1	; 0x01
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     478:	4f 3f       	cpi	r20, 0xFF	; 255
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	52 07       	cpc	r21, r18
     47e:	21 f4       	brne	.+8      	; 0x488 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     480:	fc 01       	movw	r30, r24
     482:	a7 81       	ldd	r26, Z+7	; 0x07
     484:	b0 85       	ldd	r27, Z+8	; 0x08
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <vListInsert+0x34>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     488:	dc 01       	movw	r26, r24
     48a:	13 96       	adiw	r26, 0x03	; 3
     48c:	01 c0       	rjmp	.+2      	; 0x490 <vListInsert+0x22>
     48e:	df 01       	movw	r26, r30
     490:	12 96       	adiw	r26, 0x02	; 2
     492:	ed 91       	ld	r30, X+
     494:	fc 91       	ld	r31, X
     496:	13 97       	sbiw	r26, 0x03	; 3
     498:	20 81       	ld	r18, Z
     49a:	31 81       	ldd	r19, Z+1	; 0x01
     49c:	42 17       	cp	r20, r18
     49e:	53 07       	cpc	r21, r19
     4a0:	b0 f7       	brcc	.-20     	; 0x48e <vListInsert+0x20>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     4a2:	12 96       	adiw	r26, 0x02	; 2
     4a4:	ed 91       	ld	r30, X+
     4a6:	fc 91       	ld	r31, X
     4a8:	13 97       	sbiw	r26, 0x03	; 3
     4aa:	fb 83       	std	Y+3, r31	; 0x03
     4ac:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     4ae:	d5 83       	std	Z+5, r29	; 0x05
     4b0:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     4b2:	bd 83       	std	Y+5, r27	; 0x05
     4b4:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     4b6:	13 96       	adiw	r26, 0x03	; 3
     4b8:	dc 93       	st	X, r29
     4ba:	ce 93       	st	-X, r28
     4bc:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     4be:	99 87       	std	Y+9, r25	; 0x09
     4c0:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     4c2:	fc 01       	movw	r30, r24
     4c4:	20 81       	ld	r18, Z
     4c6:	2f 5f       	subi	r18, 0xFF	; 255
     4c8:	20 83       	st	Z, r18
}
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	08 95       	ret

000004d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     4d6:	a0 85       	ldd	r26, Z+8	; 0x08
     4d8:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     4da:	c2 81       	ldd	r28, Z+2	; 0x02
     4dc:	d3 81       	ldd	r29, Z+3	; 0x03
     4de:	84 81       	ldd	r24, Z+4	; 0x04
     4e0:	95 81       	ldd	r25, Z+5	; 0x05
     4e2:	9d 83       	std	Y+5, r25	; 0x05
     4e4:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     4e6:	c4 81       	ldd	r28, Z+4	; 0x04
     4e8:	d5 81       	ldd	r29, Z+5	; 0x05
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	9b 83       	std	Y+3, r25	; 0x03
     4f0:	8a 83       	std	Y+2, r24	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     4f2:	11 96       	adiw	r26, 0x01	; 1
     4f4:	8d 91       	ld	r24, X+
     4f6:	9c 91       	ld	r25, X
     4f8:	12 97       	sbiw	r26, 0x02	; 2
     4fa:	e8 17       	cp	r30, r24
     4fc:	f9 07       	cpc	r31, r25
     4fe:	31 f4       	brne	.+12     	; 0x50c <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     500:	84 81       	ldd	r24, Z+4	; 0x04
     502:	95 81       	ldd	r25, Z+5	; 0x05
     504:	12 96       	adiw	r26, 0x02	; 2
     506:	9c 93       	st	X, r25
     508:	8e 93       	st	-X, r24
     50a:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     50c:	11 86       	std	Z+9, r1	; 0x09
     50e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     510:	8c 91       	ld	r24, X
     512:	81 50       	subi	r24, 0x01	; 1
     514:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     51c:	31 e1       	ldi	r19, 0x11	; 17
     51e:	fc 01       	movw	r30, r24
     520:	30 83       	st	Z, r19
     522:	31 97       	sbiw	r30, 0x01	; 1
     524:	22 e2       	ldi	r18, 0x22	; 34
     526:	20 83       	st	Z, r18
     528:	31 97       	sbiw	r30, 0x01	; 1
     52a:	a3 e3       	ldi	r26, 0x33	; 51
     52c:	a0 83       	st	Z, r26
     52e:	31 97       	sbiw	r30, 0x01	; 1
     530:	60 83       	st	Z, r22
     532:	31 97       	sbiw	r30, 0x01	; 1
     534:	70 83       	st	Z, r23
     536:	31 97       	sbiw	r30, 0x01	; 1
     538:	10 82       	st	Z, r1
     53a:	31 97       	sbiw	r30, 0x01	; 1
     53c:	60 e8       	ldi	r22, 0x80	; 128
     53e:	60 83       	st	Z, r22
     540:	31 97       	sbiw	r30, 0x01	; 1
     542:	10 82       	st	Z, r1
     544:	31 97       	sbiw	r30, 0x01	; 1
     546:	62 e0       	ldi	r22, 0x02	; 2
     548:	60 83       	st	Z, r22
     54a:	31 97       	sbiw	r30, 0x01	; 1
     54c:	63 e0       	ldi	r22, 0x03	; 3
     54e:	60 83       	st	Z, r22
     550:	31 97       	sbiw	r30, 0x01	; 1
     552:	64 e0       	ldi	r22, 0x04	; 4
     554:	60 83       	st	Z, r22
     556:	31 97       	sbiw	r30, 0x01	; 1
     558:	65 e0       	ldi	r22, 0x05	; 5
     55a:	60 83       	st	Z, r22
     55c:	31 97       	sbiw	r30, 0x01	; 1
     55e:	66 e0       	ldi	r22, 0x06	; 6
     560:	60 83       	st	Z, r22
     562:	31 97       	sbiw	r30, 0x01	; 1
     564:	67 e0       	ldi	r22, 0x07	; 7
     566:	60 83       	st	Z, r22
     568:	31 97       	sbiw	r30, 0x01	; 1
     56a:	68 e0       	ldi	r22, 0x08	; 8
     56c:	60 83       	st	Z, r22
     56e:	31 97       	sbiw	r30, 0x01	; 1
     570:	69 e0       	ldi	r22, 0x09	; 9
     572:	60 83       	st	Z, r22
     574:	31 97       	sbiw	r30, 0x01	; 1
     576:	60 e1       	ldi	r22, 0x10	; 16
     578:	60 83       	st	Z, r22
     57a:	31 97       	sbiw	r30, 0x01	; 1
     57c:	30 83       	st	Z, r19
     57e:	31 97       	sbiw	r30, 0x01	; 1
     580:	32 e1       	ldi	r19, 0x12	; 18
     582:	30 83       	st	Z, r19
     584:	31 97       	sbiw	r30, 0x01	; 1
     586:	33 e1       	ldi	r19, 0x13	; 19
     588:	30 83       	st	Z, r19
     58a:	31 97       	sbiw	r30, 0x01	; 1
     58c:	34 e1       	ldi	r19, 0x14	; 20
     58e:	30 83       	st	Z, r19
     590:	31 97       	sbiw	r30, 0x01	; 1
     592:	35 e1       	ldi	r19, 0x15	; 21
     594:	30 83       	st	Z, r19
     596:	31 97       	sbiw	r30, 0x01	; 1
     598:	36 e1       	ldi	r19, 0x16	; 22
     59a:	30 83       	st	Z, r19
     59c:	31 97       	sbiw	r30, 0x01	; 1
     59e:	37 e1       	ldi	r19, 0x17	; 23
     5a0:	30 83       	st	Z, r19
     5a2:	31 97       	sbiw	r30, 0x01	; 1
     5a4:	38 e1       	ldi	r19, 0x18	; 24
     5a6:	30 83       	st	Z, r19
     5a8:	31 97       	sbiw	r30, 0x01	; 1
     5aa:	39 e1       	ldi	r19, 0x19	; 25
     5ac:	30 83       	st	Z, r19
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	30 e2       	ldi	r19, 0x20	; 32
     5b2:	30 83       	st	Z, r19
     5b4:	31 97       	sbiw	r30, 0x01	; 1
     5b6:	31 e2       	ldi	r19, 0x21	; 33
     5b8:	30 83       	st	Z, r19
     5ba:	31 97       	sbiw	r30, 0x01	; 1
     5bc:	20 83       	st	Z, r18
     5be:	31 97       	sbiw	r30, 0x01	; 1
     5c0:	23 e2       	ldi	r18, 0x23	; 35
     5c2:	20 83       	st	Z, r18
     5c4:	31 97       	sbiw	r30, 0x01	; 1
     5c6:	40 83       	st	Z, r20
     5c8:	31 97       	sbiw	r30, 0x01	; 1
     5ca:	50 83       	st	Z, r21
     5cc:	31 97       	sbiw	r30, 0x01	; 1
     5ce:	26 e2       	ldi	r18, 0x26	; 38
     5d0:	20 83       	st	Z, r18
     5d2:	31 97       	sbiw	r30, 0x01	; 1
     5d4:	27 e2       	ldi	r18, 0x27	; 39
     5d6:	20 83       	st	Z, r18
     5d8:	31 97       	sbiw	r30, 0x01	; 1
     5da:	28 e2       	ldi	r18, 0x28	; 40
     5dc:	20 83       	st	Z, r18
     5de:	31 97       	sbiw	r30, 0x01	; 1
     5e0:	29 e2       	ldi	r18, 0x29	; 41
     5e2:	20 83       	st	Z, r18
     5e4:	31 97       	sbiw	r30, 0x01	; 1
     5e6:	20 e3       	ldi	r18, 0x30	; 48
     5e8:	20 83       	st	Z, r18
     5ea:	31 97       	sbiw	r30, 0x01	; 1
     5ec:	21 e3       	ldi	r18, 0x31	; 49
     5ee:	20 83       	st	Z, r18
     5f0:	86 97       	sbiw	r24, 0x26	; 38
     5f2:	08 95       	ret

000005f4 <xPortStartScheduler>:
     5f4:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     5f8:	85 ee       	ldi	r24, 0xE5	; 229
     5fa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     5fe:	8b e0       	ldi	r24, 0x0B	; 11
     600:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     604:	ef e6       	ldi	r30, 0x6F	; 111
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	82 60       	ori	r24, 0x02	; 2
     60c:	80 83       	st	Z, r24
     60e:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
     612:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
     616:	cd 91       	ld	r28, X+
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	dd 91       	ld	r29, X+
     61c:	de bf       	out	0x3e, r29	; 62
     61e:	ff 91       	pop	r31
     620:	ef 91       	pop	r30
     622:	df 91       	pop	r29
     624:	cf 91       	pop	r28
     626:	bf 91       	pop	r27
     628:	af 91       	pop	r26
     62a:	9f 91       	pop	r25
     62c:	8f 91       	pop	r24
     62e:	7f 91       	pop	r23
     630:	6f 91       	pop	r22
     632:	5f 91       	pop	r21
     634:	4f 91       	pop	r20
     636:	3f 91       	pop	r19
     638:	2f 91       	pop	r18
     63a:	1f 91       	pop	r17
     63c:	0f 91       	pop	r16
     63e:	ff 90       	pop	r15
     640:	ef 90       	pop	r14
     642:	df 90       	pop	r13
     644:	cf 90       	pop	r12
     646:	bf 90       	pop	r11
     648:	af 90       	pop	r10
     64a:	9f 90       	pop	r9
     64c:	8f 90       	pop	r8
     64e:	7f 90       	pop	r7
     650:	6f 90       	pop	r6
     652:	5f 90       	pop	r5
     654:	4f 90       	pop	r4
     656:	3f 90       	pop	r3
     658:	2f 90       	pop	r2
     65a:	1f 90       	pop	r1
     65c:	0f 90       	pop	r0
     65e:	0f be       	out	0x3f, r0	; 63
     660:	0f 90       	pop	r0
     662:	08 95       	ret
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	08 95       	ret

00000668 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     668:	0f 92       	push	r0
     66a:	0f b6       	in	r0, 0x3f	; 63
     66c:	f8 94       	cli
     66e:	0f 92       	push	r0
     670:	1f 92       	push	r1
     672:	11 24       	eor	r1, r1
     674:	2f 92       	push	r2
     676:	3f 92       	push	r3
     678:	4f 92       	push	r4
     67a:	5f 92       	push	r5
     67c:	6f 92       	push	r6
     67e:	7f 92       	push	r7
     680:	8f 92       	push	r8
     682:	9f 92       	push	r9
     684:	af 92       	push	r10
     686:	bf 92       	push	r11
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	2f 93       	push	r18
     696:	3f 93       	push	r19
     698:	4f 93       	push	r20
     69a:	5f 93       	push	r21
     69c:	6f 93       	push	r22
     69e:	7f 93       	push	r23
     6a0:	8f 93       	push	r24
     6a2:	9f 93       	push	r25
     6a4:	af 93       	push	r26
     6a6:	bf 93       	push	r27
     6a8:	cf 93       	push	r28
     6aa:	df 93       	push	r29
     6ac:	ef 93       	push	r30
     6ae:	ff 93       	push	r31
     6b0:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
     6b4:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
     6b8:	0d b6       	in	r0, 0x3d	; 61
     6ba:	0d 92       	st	X+, r0
     6bc:	0e b6       	in	r0, 0x3e	; 62
     6be:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     6c0:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     6c4:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
     6c8:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
     6cc:	cd 91       	ld	r28, X+
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	dd 91       	ld	r29, X+
     6d2:	de bf       	out	0x3e, r29	; 62
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	df 91       	pop	r29
     6da:	cf 91       	pop	r28
     6dc:	bf 91       	pop	r27
     6de:	af 91       	pop	r26
     6e0:	9f 91       	pop	r25
     6e2:	8f 91       	pop	r24
     6e4:	7f 91       	pop	r23
     6e6:	6f 91       	pop	r22
     6e8:	5f 91       	pop	r21
     6ea:	4f 91       	pop	r20
     6ec:	3f 91       	pop	r19
     6ee:	2f 91       	pop	r18
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	bf 90       	pop	r11
     6fe:	af 90       	pop	r10
     700:	9f 90       	pop	r9
     702:	8f 90       	pop	r8
     704:	7f 90       	pop	r7
     706:	6f 90       	pop	r6
     708:	5f 90       	pop	r5
     70a:	4f 90       	pop	r4
     70c:	3f 90       	pop	r3
     70e:	2f 90       	pop	r2
     710:	1f 90       	pop	r1
     712:	0f 90       	pop	r0
     714:	0f be       	out	0x3f, r0	; 63
     716:	0f 90       	pop	r0

	asm volatile ( "ret" );
     718:	08 95       	ret

0000071a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     71a:	0f 92       	push	r0
     71c:	0f b6       	in	r0, 0x3f	; 63
     71e:	f8 94       	cli
     720:	0f 92       	push	r0
     722:	1f 92       	push	r1
     724:	11 24       	eor	r1, r1
     726:	2f 92       	push	r2
     728:	3f 92       	push	r3
     72a:	4f 92       	push	r4
     72c:	5f 92       	push	r5
     72e:	6f 92       	push	r6
     730:	7f 92       	push	r7
     732:	8f 92       	push	r8
     734:	9f 92       	push	r9
     736:	af 92       	push	r10
     738:	bf 92       	push	r11
     73a:	cf 92       	push	r12
     73c:	df 92       	push	r13
     73e:	ef 92       	push	r14
     740:	ff 92       	push	r15
     742:	0f 93       	push	r16
     744:	1f 93       	push	r17
     746:	2f 93       	push	r18
     748:	3f 93       	push	r19
     74a:	4f 93       	push	r20
     74c:	5f 93       	push	r21
     74e:	6f 93       	push	r22
     750:	7f 93       	push	r23
     752:	8f 93       	push	r24
     754:	9f 93       	push	r25
     756:	af 93       	push	r26
     758:	bf 93       	push	r27
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
     762:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
     766:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
     76a:	0d b6       	in	r0, 0x3d	; 61
     76c:	0d 92       	st	X+, r0
     76e:	0e b6       	in	r0, 0x3e	; 62
     770:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     772:	0e 94 88 0a 	call	0x1510	; 0x1510 <xTaskIncrementTick>
     776:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     778:	0e 94 24 0c 	call	0x1848	; 0x1848 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     77c:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
     780:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
     784:	cd 91       	ld	r28, X+
     786:	cd bf       	out	0x3d, r28	; 61
     788:	dd 91       	ld	r29, X+
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	ff 91       	pop	r31
     78e:	ef 91       	pop	r30
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	bf 91       	pop	r27
     796:	af 91       	pop	r26
     798:	9f 91       	pop	r25
     79a:	8f 91       	pop	r24
     79c:	7f 91       	pop	r23
     79e:	6f 91       	pop	r22
     7a0:	5f 91       	pop	r21
     7a2:	4f 91       	pop	r20
     7a4:	3f 91       	pop	r19
     7a6:	2f 91       	pop	r18
     7a8:	1f 91       	pop	r17
     7aa:	0f 91       	pop	r16
     7ac:	ff 90       	pop	r15
     7ae:	ef 90       	pop	r14
     7b0:	df 90       	pop	r13
     7b2:	cf 90       	pop	r12
     7b4:	bf 90       	pop	r11
     7b6:	af 90       	pop	r10
     7b8:	9f 90       	pop	r9
     7ba:	8f 90       	pop	r8
     7bc:	7f 90       	pop	r7
     7be:	6f 90       	pop	r6
     7c0:	5f 90       	pop	r5
     7c2:	4f 90       	pop	r4
     7c4:	3f 90       	pop	r3
     7c6:	2f 90       	pop	r2
     7c8:	1f 90       	pop	r1
     7ca:	0f 90       	pop	r0
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	0f 90       	pop	r0

	asm volatile ( "ret" );
     7d0:	08 95       	ret

000007d2 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
     7d2:	0e 94 8d 03 	call	0x71a	; 0x71a <vPortYieldFromTick>
		asm volatile ( "reti" );
     7d6:	18 95       	reti

000007d8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     7d8:	cf 93       	push	r28
     7da:	df 93       	push	r29
     7dc:	ec 01       	movw	r28, r24
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
     7de:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     7e2:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <pucAlignedHeap.2084>
     7e6:	90 91 9e 01 	lds	r25, 0x019E	; 0x80019e <pucAlignedHeap.2084+0x1>
     7ea:	89 2b       	or	r24, r25
     7ec:	31 f4       	brne	.+12     	; 0x7fa <pvPortMalloc+0x22>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     7ee:	82 ea       	ldi	r24, 0xA2	; 162
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	90 93 9e 01 	sts	0x019E, r25	; 0x80019e <pucAlignedHeap.2084+0x1>
     7f6:	80 93 9d 01 	sts	0x019D, r24	; 0x80019d <pucAlignedHeap.2084>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     7fa:	20 91 9f 01 	lds	r18, 0x019F	; 0x80019f <xNextFreeByte>
     7fe:	30 91 a0 01 	lds	r19, 0x01A0	; 0x8001a0 <xNextFreeByte+0x1>
     802:	c9 01       	movw	r24, r18
     804:	8c 0f       	add	r24, r28
     806:	9d 1f       	adc	r25, r29
     808:	87 3e       	cpi	r24, 0xE7	; 231
     80a:	43 e0       	ldi	r20, 0x03	; 3
     80c:	94 07       	cpc	r25, r20
     80e:	70 f4       	brcc	.+28     	; 0x82c <pvPortMalloc+0x54>
     810:	28 17       	cp	r18, r24
     812:	39 07       	cpc	r19, r25
     814:	70 f4       	brcc	.+28     	; 0x832 <pvPortMalloc+0x5a>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     816:	c0 91 9d 01 	lds	r28, 0x019D	; 0x80019d <pucAlignedHeap.2084>
     81a:	d0 91 9e 01 	lds	r29, 0x019E	; 0x80019e <pucAlignedHeap.2084+0x1>
     81e:	c2 0f       	add	r28, r18
     820:	d3 1f       	adc	r29, r19
			xNextFreeByte += xWantedSize;
     822:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextFreeByte+0x1>
     826:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextFreeByte>
     82a:	05 c0       	rjmp	.+10     	; 0x836 <pvPortMalloc+0x5e>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     82c:	c0 e0       	ldi	r28, 0x00	; 0
     82e:	d0 e0       	ldi	r29, 0x00	; 0
     830:	02 c0       	rjmp	.+4      	; 0x836 <pvPortMalloc+0x5e>
     832:	c0 e0       	ldi	r28, 0x00	; 0
     834:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     836:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     83a:	ce 01       	movw	r24, r28
     83c:	df 91       	pop	r29
     83e:	cf 91       	pop	r28
     840:	08 95       	ret

00000842 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     842:	08 95       	ret

00000844 <serial_new_instance>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
     844:	4f 92       	push	r4
     846:	5f 92       	push	r5
     848:	6f 92       	push	r6
     84a:	7f 92       	push	r7
     84c:	8f 92       	push	r8
     84e:	9f 92       	push	r9
     850:	af 92       	push	r10
     852:	bf 92       	push	r11
     854:	cf 92       	push	r12
     856:	df 92       	push	r13
     858:	ff 92       	push	r15
     85a:	0f 93       	push	r16
     85c:	1f 93       	push	r17
     85e:	cf 93       	push	r28
     860:	df 93       	push	r29
     862:	cd b7       	in	r28, 0x3d	; 61
     864:	de b7       	in	r29, 0x3e	; 62
     866:	f8 2e       	mov	r15, r24
     868:	2a 01       	movw	r4, r20
     86a:	3b 01       	movw	r6, r22
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <malloc>
     874:	8c 01       	movw	r16, r24
     876:	8f 2d       	mov	r24, r15
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	88 0f       	add	r24, r24
     87c:	99 1f       	adc	r25, r25
     87e:	fc 01       	movw	r30, r24
     880:	e7 57       	subi	r30, 0x77	; 119
     882:	fa 4f       	sbci	r31, 0xFA	; 250
     884:	11 83       	std	Z+1, r17	; 0x01
     886:	00 83       	st	Z, r16
     888:	fc 01       	movw	r30, r24
     88a:	ea 5f       	subi	r30, 0xFA	; 250
     88c:	fe 4f       	sbci	r31, 0xFE	; 254
     88e:	80 81       	ld	r24, Z
     890:	91 81       	ldd	r25, Z+1	; 0x01
     892:	d8 01       	movw	r26, r16
     894:	11 96       	adiw	r26, 0x01	; 1
     896:	9c 93       	st	X, r25
     898:	8e 93       	st	-X, r24
     89a:	13 96       	adiw	r26, 0x03	; 3
     89c:	bc 92       	st	X, r11
     89e:	ae 92       	st	-X, r10
     8a0:	12 97       	sbiw	r26, 0x02	; 2
     8a2:	15 96       	adiw	r26, 0x05	; 5
     8a4:	dc 92       	st	X, r13
     8a6:	ce 92       	st	-X, r12
     8a8:	14 97       	sbiw	r26, 0x04	; 4
     8aa:	17 96       	adiw	r26, 0x07	; 7
     8ac:	9c 92       	st	X, r9
     8ae:	8e 92       	st	-X, r8
     8b0:	16 97       	sbiw	r26, 0x06	; 6
     8b2:	ff b6       	in	r15, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	ed 91       	ld	r30, X+
     8b8:	fc 91       	ld	r31, X
     8ba:	11 97       	sbiw	r26, 0x01	; 1
     8bc:	36 97       	sbiw	r30, 0x06	; 6
     8be:	80 81       	ld	r24, Z
     8c0:	82 60       	ori	r24, 0x02	; 2
     8c2:	80 83       	st	Z, r24
     8c4:	cd 90       	ld	r12, X+
     8c6:	dc 90       	ld	r13, X
     8c8:	d3 01       	movw	r26, r6
     8ca:	c2 01       	movw	r24, r4
     8cc:	88 0f       	add	r24, r24
     8ce:	99 1f       	adc	r25, r25
     8d0:	aa 1f       	adc	r26, r26
     8d2:	bb 1f       	adc	r27, r27
     8d4:	88 0f       	add	r24, r24
     8d6:	99 1f       	adc	r25, r25
     8d8:	aa 1f       	adc	r26, r26
     8da:	bb 1f       	adc	r27, r27
     8dc:	9c 01       	movw	r18, r24
     8de:	ad 01       	movw	r20, r26
     8e0:	22 0f       	add	r18, r18
     8e2:	33 1f       	adc	r19, r19
     8e4:	44 1f       	adc	r20, r20
     8e6:	55 1f       	adc	r21, r21
     8e8:	60 e0       	ldi	r22, 0x00	; 0
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	81 ee       	ldi	r24, 0xE1	; 225
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 e7 0d 	call	0x1bce	; 0x1bce <__udivmodsi4>
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	f6 01       	movw	r30, r12
     8f8:	32 97       	sbiw	r30, 0x02	; 2
     8fa:	20 83       	st	Z, r18
     8fc:	d8 01       	movw	r26, r16
     8fe:	ed 91       	ld	r30, X+
     900:	fc 91       	ld	r31, X
     902:	11 97       	sbiw	r26, 0x01	; 1
     904:	35 97       	sbiw	r30, 0x05	; 5
     906:	88 e9       	ldi	r24, 0x98	; 152
     908:	80 83       	st	Z, r24
     90a:	ed 91       	ld	r30, X+
     90c:	fc 91       	ld	r31, X
     90e:	34 97       	sbiw	r30, 0x04	; 4
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	80 83       	st	Z, r24
     914:	ff be       	out	0x3f, r15	; 63
     916:	c8 01       	movw	r24, r16
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	1f 91       	pop	r17
     91e:	0f 91       	pop	r16
     920:	ff 90       	pop	r15
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	9f 90       	pop	r9
     92c:	8f 90       	pop	r8
     92e:	7f 90       	pop	r7
     930:	6f 90       	pop	r6
     932:	5f 90       	pop	r5
     934:	4f 90       	pop	r4
     936:	08 95       	ret

00000938 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
     938:	ef 92       	push	r14
     93a:	ff 92       	push	r15
     93c:	0f 93       	push	r16
     93e:	1f 93       	push	r17
     940:	cf 93       	push	r28
     942:	df 93       	push	r29
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     944:	fc 01       	movw	r30, r24
     946:	a2 81       	ldd	r26, Z+2	; 0x02
     948:	b3 81       	ldd	r27, Z+3	; 0x03
     94a:	10 97       	sbiw	r26, 0x00	; 0
     94c:	79 f0       	breq	.+30     	; 0x96c <serial_send_bytes+0x34>
     94e:	e4 2f       	mov	r30, r20
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	92 96       	adiw	r26, 0x22	; 34
     954:	5c 91       	ld	r21, X
     956:	20 e2       	ldi	r18, 0x20	; 32
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	25 1b       	sub	r18, r21
     95c:	31 09       	sbc	r19, r1
     95e:	2e 17       	cp	r18, r30
     960:	3f 07       	cpc	r19, r31
     962:	1c f1       	brlt	.+70     	; 0x9aa <serial_send_bytes+0x72>
     964:	7c 01       	movw	r14, r24
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
     966:	41 11       	cpse	r20, r1
     968:	04 c0       	rjmp	.+8      	; 0x972 <serial_send_bytes+0x3a>
     96a:	16 c0       	rjmp	.+44     	; 0x998 <serial_send_bytes+0x60>

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
     96c:	42 30       	cpi	r20, 0x02	; 2
     96e:	f8 f4       	brcc	.+62     	; 0x9ae <serial_send_bytes+0x76>
     970:	f9 cf       	rjmp	.-14     	; 0x964 <serial_send_bytes+0x2c>
     972:	eb 01       	movw	r28, r22
     974:	41 50       	subi	r20, 0x01	; 1
     976:	04 2f       	mov	r16, r20
     978:	10 e0       	ldi	r17, 0x00	; 0
     97a:	0f 5f       	subi	r16, 0xFF	; 255
     97c:	1f 4f       	sbci	r17, 0xFF	; 255
     97e:	06 0f       	add	r16, r22
     980:	17 1f       	adc	r17, r23
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
     982:	69 91       	ld	r22, Y+
     984:	d7 01       	movw	r26, r14
     986:	12 96       	adiw	r26, 0x02	; 2
     988:	8d 91       	ld	r24, X+
     98a:	9c 91       	ld	r25, X
     98c:	13 97       	sbiw	r26, 0x03	; 3
     98e:	0e 94 e7 01 	call	0x3ce	; 0x3ce <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
     992:	c0 17       	cp	r28, r16
     994:	d1 07       	cpc	r29, r17
     996:	a9 f7       	brne	.-22     	; 0x982 <serial_send_bytes+0x4a>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
     998:	d7 01       	movw	r26, r14
     99a:	ed 91       	ld	r30, X+
     99c:	fc 91       	ld	r31, X
SREG = _sreg;


/*-----------------------------------------------------------*/
static void _serial_tx_int_on(volatile uint8_t *UDR_reg) {
	*(UDR_reg  - UCSRB_off) |= serTX_INT_ENABLE;
     99e:	35 97       	sbiw	r30, 0x05	; 5
     9a0:	80 81       	ld	r24, Z
     9a2:	80 62       	ori	r24, 0x20	; 32
     9a4:	80 83       	st	Z, r24
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <serial_send_bytes+0x78>
/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <serial_send_bytes+0x78>
     9ae:	82 e0       	ldi	r24, 0x02	; 2
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
     9b0:	df 91       	pop	r29
     9b2:	cf 91       	pop	r28
     9b4:	1f 91       	pop	r17
     9b6:	0f 91       	pop	r16
     9b8:	ff 90       	pop	r15
     9ba:	ef 90       	pop	r14
     9bc:	08 95       	ret

000009be <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
     9be:	1f 92       	push	r1
     9c0:	0f 92       	push	r0
     9c2:	0f b6       	in	r0, 0x3f	; 63
     9c4:	0f 92       	push	r0
     9c6:	11 24       	eor	r1, r1
     9c8:	2f 93       	push	r18
     9ca:	3f 93       	push	r19
     9cc:	4f 93       	push	r20
     9ce:	5f 93       	push	r21
     9d0:	6f 93       	push	r22
     9d2:	7f 93       	push	r23
     9d4:	8f 93       	push	r24
     9d6:	9f 93       	push	r25
     9d8:	af 93       	push	r26
     9da:	bf 93       	push	r27
     9dc:	cf 93       	push	r28
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
     9e2:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <_ser_handle>
     9e6:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <_ser_handle+0x1>
     9ea:	30 97       	sbiw	r30, 0x00	; 0
     9ec:	a1 f0       	breq	.+40     	; 0xa16 <__vector_20+0x58>
		item = UDR0;
     9ee:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
     9f2:	6c 2f       	mov	r22, r28
     9f4:	84 81       	ldd	r24, Z+4	; 0x04
     9f6:	95 81       	ldd	r25, Z+5	; 0x05
     9f8:	0e 94 e7 01 	call	0x3ce	; 0x3ce <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
     9fc:	80 91 89 05 	lds	r24, 0x0589	; 0x800589 <_ser_handle>
     a00:	90 91 8a 05 	lds	r25, 0x058A	; 0x80058a <_ser_handle+0x1>
     a04:	dc 01       	movw	r26, r24
     a06:	16 96       	adiw	r26, 0x06	; 6
     a08:	ed 91       	ld	r30, X+
     a0a:	fc 91       	ld	r31, X
     a0c:	17 97       	sbiw	r26, 0x07	; 7
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	11 f0       	breq	.+4      	; 0xa16 <__vector_20+0x58>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
     a12:	6c 2f       	mov	r22, r28
     a14:	09 95       	icall
		}
	}
}
     a16:	ff 91       	pop	r31
     a18:	ef 91       	pop	r30
     a1a:	cf 91       	pop	r28
     a1c:	bf 91       	pop	r27
     a1e:	af 91       	pop	r26
     a20:	9f 91       	pop	r25
     a22:	8f 91       	pop	r24
     a24:	7f 91       	pop	r23
     a26:	6f 91       	pop	r22
     a28:	5f 91       	pop	r21
     a2a:	4f 91       	pop	r20
     a2c:	3f 91       	pop	r19
     a2e:	2f 91       	pop	r18
     a30:	0f 90       	pop	r0
     a32:	0f be       	out	0x3f, r0	; 63
     a34:	0f 90       	pop	r0
     a36:	1f 90       	pop	r1
     a38:	18 95       	reti

00000a3a <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
     a3a:	1f 92       	push	r1
     a3c:	0f 92       	push	r0
     a3e:	0f b6       	in	r0, 0x3f	; 63
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	1f 92       	push	r1
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
     a66:	e0 91 89 05 	lds	r30, 0x0589	; 0x800589 <_ser_handle>
     a6a:	f0 91 8a 05 	lds	r31, 0x058A	; 0x80058a <_ser_handle+0x1>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	99 f0       	breq	.+38     	; 0xa98 <__vector_21+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
     a72:	be 01       	movw	r22, r28
     a74:	6f 5f       	subi	r22, 0xFF	; 255
     a76:	7f 4f       	sbci	r23, 0xFF	; 255
     a78:	82 81       	ldd	r24, Z+2	; 0x02
     a7a:	93 81       	ldd	r25, Z+3	; 0x03
     a7c:	0e 94 c6 01 	call	0x38c	; 0x38c <buffer_get_item>
     a80:	81 11       	cpse	r24, r1
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__vector_21+0x52>
			UDR0 = item;
     a84:	89 81       	ldd	r24, Y+1	; 0x01
     a86:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     a8a:	0b c0       	rjmp	.+22     	; 0xaa2 <__vector_21+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
     a8c:	e1 ec       	ldi	r30, 0xC1	; 193
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	80 83       	st	Z, r24
     a96:	05 c0       	rjmp	.+10     	; 0xaa2 <__vector_21+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
     a98:	e1 ec       	ldi	r30, 0xC1	; 193
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	8f 7d       	andi	r24, 0xDF	; 223
     aa0:	80 83       	st	Z, r24
	}
}
     aa2:	0f 90       	pop	r0
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	bf 91       	pop	r27
     aae:	af 91       	pop	r26
     ab0:	9f 91       	pop	r25
     ab2:	8f 91       	pop	r24
     ab4:	7f 91       	pop	r23
     ab6:	6f 91       	pop	r22
     ab8:	5f 91       	pop	r21
     aba:	4f 91       	pop	r20
     abc:	3f 91       	pop	r19
     abe:	2f 91       	pop	r18
     ac0:	0f 90       	pop	r0
     ac2:	0f be       	out	0x3f, r0	; 63
     ac4:	0f 90       	pop	r0
     ac6:	1f 90       	pop	r1
     ac8:	18 95       	reti

00000aca <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
     aca:	1f 92       	push	r1
     acc:	0f 92       	push	r0
     ace:	0f b6       	in	r0, 0x3f	; 63
     ad0:	0f 92       	push	r0
     ad2:	11 24       	eor	r1, r1
     ad4:	2f 93       	push	r18
     ad6:	3f 93       	push	r19
     ad8:	4f 93       	push	r20
     ada:	5f 93       	push	r21
     adc:	6f 93       	push	r22
     ade:	7f 93       	push	r23
     ae0:	8f 93       	push	r24
     ae2:	9f 93       	push	r25
     ae4:	af 93       	push	r26
     ae6:	bf 93       	push	r27
     ae8:	cf 93       	push	r28
     aea:	ef 93       	push	r30
     aec:	ff 93       	push	r31
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
     aee:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <_ser_handle+0x2>
     af2:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <_ser_handle+0x3>
     af6:	30 97       	sbiw	r30, 0x00	; 0
     af8:	a1 f0       	breq	.+40     	; 0xb22 <__vector_28+0x58>
		item = UDR1;
     afa:	c0 91 ce 00 	lds	r28, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
     afe:	6c 2f       	mov	r22, r28
     b00:	84 81       	ldd	r24, Z+4	; 0x04
     b02:	95 81       	ldd	r25, Z+5	; 0x05
     b04:	0e 94 e7 01 	call	0x3ce	; 0x3ce <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
     b08:	80 91 8b 05 	lds	r24, 0x058B	; 0x80058b <_ser_handle+0x2>
     b0c:	90 91 8c 05 	lds	r25, 0x058C	; 0x80058c <_ser_handle+0x3>
     b10:	dc 01       	movw	r26, r24
     b12:	16 96       	adiw	r26, 0x06	; 6
     b14:	ed 91       	ld	r30, X+
     b16:	fc 91       	ld	r31, X
     b18:	17 97       	sbiw	r26, 0x07	; 7
     b1a:	30 97       	sbiw	r30, 0x00	; 0
     b1c:	11 f0       	breq	.+4      	; 0xb22 <__vector_28+0x58>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
     b1e:	6c 2f       	mov	r22, r28
     b20:	09 95       	icall
		}
	}
}
     b22:	ff 91       	pop	r31
     b24:	ef 91       	pop	r30
     b26:	cf 91       	pop	r28
     b28:	bf 91       	pop	r27
     b2a:	af 91       	pop	r26
     b2c:	9f 91       	pop	r25
     b2e:	8f 91       	pop	r24
     b30:	7f 91       	pop	r23
     b32:	6f 91       	pop	r22
     b34:	5f 91       	pop	r21
     b36:	4f 91       	pop	r20
     b38:	3f 91       	pop	r19
     b3a:	2f 91       	pop	r18
     b3c:	0f 90       	pop	r0
     b3e:	0f be       	out	0x3f, r0	; 63
     b40:	0f 90       	pop	r0
     b42:	1f 90       	pop	r1
     b44:	18 95       	reti

00000b46 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
     b46:	1f 92       	push	r1
     b48:	0f 92       	push	r0
     b4a:	0f b6       	in	r0, 0x3f	; 63
     b4c:	0f 92       	push	r0
     b4e:	11 24       	eor	r1, r1
     b50:	2f 93       	push	r18
     b52:	3f 93       	push	r19
     b54:	4f 93       	push	r20
     b56:	5f 93       	push	r21
     b58:	6f 93       	push	r22
     b5a:	7f 93       	push	r23
     b5c:	8f 93       	push	r24
     b5e:	9f 93       	push	r25
     b60:	af 93       	push	r26
     b62:	bf 93       	push	r27
     b64:	ef 93       	push	r30
     b66:	ff 93       	push	r31
     b68:	cf 93       	push	r28
     b6a:	df 93       	push	r29
     b6c:	1f 92       	push	r1
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
     b72:	e0 91 8b 05 	lds	r30, 0x058B	; 0x80058b <_ser_handle+0x2>
     b76:	f0 91 8c 05 	lds	r31, 0x058C	; 0x80058c <_ser_handle+0x3>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	99 f0       	breq	.+38     	; 0xba4 <__vector_29+0x5e>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
     b7e:	be 01       	movw	r22, r28
     b80:	6f 5f       	subi	r22, 0xFF	; 255
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	93 81       	ldd	r25, Z+3	; 0x03
     b88:	0e 94 c6 01 	call	0x38c	; 0x38c <buffer_get_item>
     b8c:	81 11       	cpse	r24, r1
     b8e:	04 c0       	rjmp	.+8      	; 0xb98 <__vector_29+0x52>
			UDR1 = item;
     b90:	89 81       	ldd	r24, Y+1	; 0x01
     b92:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     b96:	0b c0       	rjmp	.+22     	; 0xbae <__vector_29+0x68>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
     b98:	e9 ec       	ldi	r30, 0xC9	; 201
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7d       	andi	r24, 0xDF	; 223
     ba0:	80 83       	st	Z, r24
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <__vector_29+0x68>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
     ba4:	e9 ec       	ldi	r30, 0xC9	; 201
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8f 7d       	andi	r24, 0xDF	; 223
     bac:	80 83       	st	Z, r24
	}
}
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	ff 91       	pop	r31
     bb6:	ef 91       	pop	r30
     bb8:	bf 91       	pop	r27
     bba:	af 91       	pop	r26
     bbc:	9f 91       	pop	r25
     bbe:	8f 91       	pop	r24
     bc0:	7f 91       	pop	r23
     bc2:	6f 91       	pop	r22
     bc4:	5f 91       	pop	r21
     bc6:	4f 91       	pop	r20
     bc8:	3f 91       	pop	r19
     bca:	2f 91       	pop	r18
     bcc:	0f 90       	pop	r0
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	0f 90       	pop	r0
     bd2:	1f 90       	pop	r1
     bd4:	18 95       	reti

00000bd6 <prvCopyDataToQueue>:
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
     bd6:	0f 93       	push	r16
     bd8:	1f 93       	push	r17
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	ec 01       	movw	r28, r24
     be0:	04 2f       	mov	r16, r20
     be2:	1a 8d       	ldd	r17, Y+26	; 0x1a
     be4:	4c 8d       	ldd	r20, Y+28	; 0x1c
     be6:	41 11       	cpse	r20, r1
     be8:	0c c0       	rjmp	.+24     	; 0xc02 <prvCopyDataToQueue+0x2c>
     bea:	88 81       	ld	r24, Y
     bec:	99 81       	ldd	r25, Y+1	; 0x01
     bee:	89 2b       	or	r24, r25
     bf0:	09 f0       	breq	.+2      	; 0xbf4 <prvCopyDataToQueue+0x1e>
     bf2:	42 c0       	rjmp	.+132    	; 0xc78 <prvCopyDataToQueue+0xa2>
     bf4:	8a 81       	ldd	r24, Y+2	; 0x02
     bf6:	9b 81       	ldd	r25, Y+3	; 0x03
     bf8:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <xTaskPriorityDisinherit>
     bfc:	1b 82       	std	Y+3, r1	; 0x03
     bfe:	1a 82       	std	Y+2, r1	; 0x02
     c00:	42 c0       	rjmp	.+132    	; 0xc86 <prvCopyDataToQueue+0xb0>
     c02:	01 11       	cpse	r16, r1
     c04:	17 c0       	rjmp	.+46     	; 0xc34 <prvCopyDataToQueue+0x5e>
     c06:	50 e0       	ldi	r21, 0x00	; 0
     c08:	8c 81       	ldd	r24, Y+4	; 0x04
     c0a:	9d 81       	ldd	r25, Y+5	; 0x05
     c0c:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <memcpy>
     c10:	2c 8d       	ldd	r18, Y+28	; 0x1c
     c12:	8c 81       	ldd	r24, Y+4	; 0x04
     c14:	9d 81       	ldd	r25, Y+5	; 0x05
     c16:	82 0f       	add	r24, r18
     c18:	91 1d       	adc	r25, r1
     c1a:	9d 83       	std	Y+5, r25	; 0x05
     c1c:	8c 83       	std	Y+4, r24	; 0x04
     c1e:	2a 81       	ldd	r18, Y+2	; 0x02
     c20:	3b 81       	ldd	r19, Y+3	; 0x03
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	50 f1       	brcs	.+84     	; 0xc7c <prvCopyDataToQueue+0xa6>
     c28:	88 81       	ld	r24, Y
     c2a:	99 81       	ldd	r25, Y+1	; 0x01
     c2c:	9d 83       	std	Y+5, r25	; 0x05
     c2e:	8c 83       	std	Y+4, r24	; 0x04
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	29 c0       	rjmp	.+82     	; 0xc86 <prvCopyDataToQueue+0xb0>
     c34:	50 e0       	ldi	r21, 0x00	; 0
     c36:	8e 81       	ldd	r24, Y+6	; 0x06
     c38:	9f 81       	ldd	r25, Y+7	; 0x07
     c3a:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <memcpy>
     c3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	91 95       	neg	r25
     c44:	81 95       	neg	r24
     c46:	91 09       	sbc	r25, r1
     c48:	2e 81       	ldd	r18, Y+6	; 0x06
     c4a:	3f 81       	ldd	r19, Y+7	; 0x07
     c4c:	28 0f       	add	r18, r24
     c4e:	39 1f       	adc	r19, r25
     c50:	3f 83       	std	Y+7, r19	; 0x07
     c52:	2e 83       	std	Y+6, r18	; 0x06
     c54:	48 81       	ld	r20, Y
     c56:	59 81       	ldd	r21, Y+1	; 0x01
     c58:	24 17       	cp	r18, r20
     c5a:	35 07       	cpc	r19, r21
     c5c:	30 f4       	brcc	.+12     	; 0xc6a <prvCopyDataToQueue+0x94>
     c5e:	2a 81       	ldd	r18, Y+2	; 0x02
     c60:	3b 81       	ldd	r19, Y+3	; 0x03
     c62:	82 0f       	add	r24, r18
     c64:	93 1f       	adc	r25, r19
     c66:	9f 83       	std	Y+7, r25	; 0x07
     c68:	8e 83       	std	Y+6, r24	; 0x06
     c6a:	02 30       	cpi	r16, 0x02	; 2
     c6c:	49 f4       	brne	.+18     	; 0xc80 <prvCopyDataToQueue+0xaa>
     c6e:	11 23       	and	r17, r17
     c70:	49 f0       	breq	.+18     	; 0xc84 <prvCopyDataToQueue+0xae>
     c72:	11 50       	subi	r17, 0x01	; 1
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	07 c0       	rjmp	.+14     	; 0xc86 <prvCopyDataToQueue+0xb0>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <prvCopyDataToQueue+0xb0>
     c7c:	80 e0       	ldi	r24, 0x00	; 0
     c7e:	03 c0       	rjmp	.+6      	; 0xc86 <prvCopyDataToQueue+0xb0>
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <prvCopyDataToQueue+0xb0>
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	1f 5f       	subi	r17, 0xFF	; 255
     c88:	1a 8f       	std	Y+26, r17	; 0x1a
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	08 95       	ret

00000c94 <prvCopyDataFromQueue>:
     c94:	fc 01       	movw	r30, r24
     c96:	44 8d       	ldd	r20, Z+28	; 0x1c
     c98:	44 23       	and	r20, r20
     c9a:	a9 f0       	breq	.+42     	; 0xcc6 <prvCopyDataFromQueue+0x32>
     c9c:	50 e0       	ldi	r21, 0x00	; 0
     c9e:	26 81       	ldd	r18, Z+6	; 0x06
     ca0:	37 81       	ldd	r19, Z+7	; 0x07
     ca2:	24 0f       	add	r18, r20
     ca4:	35 1f       	adc	r19, r21
     ca6:	37 83       	std	Z+7, r19	; 0x07
     ca8:	26 83       	std	Z+6, r18	; 0x06
     caa:	82 81       	ldd	r24, Z+2	; 0x02
     cac:	93 81       	ldd	r25, Z+3	; 0x03
     cae:	28 17       	cp	r18, r24
     cb0:	39 07       	cpc	r19, r25
     cb2:	20 f0       	brcs	.+8      	; 0xcbc <prvCopyDataFromQueue+0x28>
     cb4:	80 81       	ld	r24, Z
     cb6:	91 81       	ldd	r25, Z+1	; 0x01
     cb8:	97 83       	std	Z+7, r25	; 0x07
     cba:	86 83       	std	Z+6, r24	; 0x06
     cbc:	cb 01       	movw	r24, r22
     cbe:	66 81       	ldd	r22, Z+6	; 0x06
     cc0:	77 81       	ldd	r23, Z+7	; 0x07
     cc2:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <memcpy>
     cc6:	08 95       	ret

00000cc8 <prvUnlockQueue>:
     cc8:	ef 92       	push	r14
     cca:	ff 92       	push	r15
     ccc:	0f 93       	push	r16
     cce:	1f 93       	push	r17
     cd0:	cf 93       	push	r28
     cd2:	8c 01       	movw	r16, r24
     cd4:	0f b6       	in	r0, 0x3f	; 63
     cd6:	f8 94       	cli
     cd8:	0f 92       	push	r0
     cda:	fc 01       	movw	r30, r24
     cdc:	c6 8d       	ldd	r28, Z+30	; 0x1e
     cde:	1c 16       	cp	r1, r28
     ce0:	ac f4       	brge	.+42     	; 0xd0c <prvUnlockQueue+0x44>
     ce2:	81 89       	ldd	r24, Z+17	; 0x11
     ce4:	81 11       	cpse	r24, r1
     ce6:	06 c0       	rjmp	.+12     	; 0xcf4 <prvUnlockQueue+0x2c>
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <prvUnlockQueue+0x44>
     cea:	f8 01       	movw	r30, r16
     cec:	81 89       	ldd	r24, Z+17	; 0x11
     cee:	81 11       	cpse	r24, r1
     cf0:	05 c0       	rjmp	.+10     	; 0xcfc <prvUnlockQueue+0x34>
     cf2:	0c c0       	rjmp	.+24     	; 0xd0c <prvUnlockQueue+0x44>
     cf4:	78 01       	movw	r14, r16
     cf6:	f1 e1       	ldi	r31, 0x11	; 17
     cf8:	ef 0e       	add	r14, r31
     cfa:	f1 1c       	adc	r15, r1
     cfc:	c7 01       	movw	r24, r14
     cfe:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
     d02:	81 11       	cpse	r24, r1
     d04:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <vTaskMissedYield>
     d08:	c1 50       	subi	r28, 0x01	; 1
     d0a:	79 f7       	brne	.-34     	; 0xcea <prvUnlockQueue+0x22>
     d0c:	8f ef       	ldi	r24, 0xFF	; 255
     d0e:	f8 01       	movw	r30, r16
     d10:	86 8f       	std	Z+30, r24	; 0x1e
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f b6       	in	r0, 0x3f	; 63
     d18:	f8 94       	cli
     d1a:	0f 92       	push	r0
     d1c:	c5 8d       	ldd	r28, Z+29	; 0x1d
     d1e:	1c 16       	cp	r1, r28
     d20:	ac f4       	brge	.+42     	; 0xd4c <prvUnlockQueue+0x84>
     d22:	80 85       	ldd	r24, Z+8	; 0x08
     d24:	81 11       	cpse	r24, r1
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <prvUnlockQueue+0x6c>
     d28:	11 c0       	rjmp	.+34     	; 0xd4c <prvUnlockQueue+0x84>
     d2a:	f8 01       	movw	r30, r16
     d2c:	80 85       	ldd	r24, Z+8	; 0x08
     d2e:	81 11       	cpse	r24, r1
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <prvUnlockQueue+0x74>
     d32:	0c c0       	rjmp	.+24     	; 0xd4c <prvUnlockQueue+0x84>
     d34:	78 01       	movw	r14, r16
     d36:	f8 e0       	ldi	r31, 0x08	; 8
     d38:	ef 0e       	add	r14, r31
     d3a:	f1 1c       	adc	r15, r1
     d3c:	c7 01       	movw	r24, r14
     d3e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
     d42:	81 11       	cpse	r24, r1
     d44:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <vTaskMissedYield>
     d48:	c1 50       	subi	r28, 0x01	; 1
     d4a:	79 f7       	brne	.-34     	; 0xd2a <prvUnlockQueue+0x62>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	f8 01       	movw	r30, r16
     d50:	85 8f       	std	Z+29, r24	; 0x1d
     d52:	0f 90       	pop	r0
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	0f 91       	pop	r16
     d5c:	ff 90       	pop	r15
     d5e:	ef 90       	pop	r14
     d60:	08 95       	ret

00000d62 <xQueueGenericReset>:
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	ec 01       	movw	r28, r24
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	0f 92       	push	r0
     d6e:	48 81       	ld	r20, Y
     d70:	59 81       	ldd	r21, Y+1	; 0x01
     d72:	2c 8d       	ldd	r18, Y+28	; 0x1c
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	7b 8d       	ldd	r23, Y+27	; 0x1b
     d78:	72 9f       	mul	r23, r18
     d7a:	c0 01       	movw	r24, r0
     d7c:	73 9f       	mul	r23, r19
     d7e:	90 0d       	add	r25, r0
     d80:	11 24       	eor	r1, r1
     d82:	fa 01       	movw	r30, r20
     d84:	e8 0f       	add	r30, r24
     d86:	f9 1f       	adc	r31, r25
     d88:	fb 83       	std	Y+3, r31	; 0x03
     d8a:	ea 83       	std	Y+2, r30	; 0x02
     d8c:	1a 8e       	std	Y+26, r1	; 0x1a
     d8e:	5d 83       	std	Y+5, r21	; 0x05
     d90:	4c 83       	std	Y+4, r20	; 0x04
     d92:	82 1b       	sub	r24, r18
     d94:	93 0b       	sbc	r25, r19
     d96:	84 0f       	add	r24, r20
     d98:	95 1f       	adc	r25, r21
     d9a:	9f 83       	std	Y+7, r25	; 0x07
     d9c:	8e 83       	std	Y+6, r24	; 0x06
     d9e:	8f ef       	ldi	r24, 0xFF	; 255
     da0:	8d 8f       	std	Y+29, r24	; 0x1d
     da2:	8e 8f       	std	Y+30, r24	; 0x1e
     da4:	61 11       	cpse	r22, r1
     da6:	0c c0       	rjmp	.+24     	; 0xdc0 <xQueueGenericReset+0x5e>
     da8:	88 85       	ldd	r24, Y+8	; 0x08
     daa:	88 23       	and	r24, r24
     dac:	89 f0       	breq	.+34     	; 0xdd0 <xQueueGenericReset+0x6e>
     dae:	ce 01       	movw	r24, r28
     db0:	08 96       	adiw	r24, 0x08	; 8
     db2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
     db6:	88 23       	and	r24, r24
     db8:	59 f0       	breq	.+22     	; 0xdd0 <xQueueGenericReset+0x6e>
     dba:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <xQueueGenericReset+0x6e>
     dc0:	ce 01       	movw	r24, r28
     dc2:	08 96       	adiw	r24, 0x08	; 8
     dc4:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
     dc8:	ce 01       	movw	r24, r28
     dca:	41 96       	adiw	r24, 0x11	; 17
     dcc:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
     dd0:	0f 90       	pop	r0
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	df 91       	pop	r29
     dd8:	cf 91       	pop	r28
     dda:	08 95       	ret

00000ddc <xQueueGenericCreate>:
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	08 2f       	mov	r16, r24
     de8:	16 2f       	mov	r17, r22
     dea:	f4 2e       	mov	r15, r20
     dec:	66 23       	and	r22, r22
     dee:	c9 f0       	breq	.+50     	; 0xe22 <xQueueGenericCreate+0x46>
     df0:	86 9f       	mul	r24, r22
     df2:	c0 01       	movw	r24, r0
     df4:	11 24       	eor	r1, r1
     df6:	81 96       	adiw	r24, 0x21	; 33
     df8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pvPortMalloc>
     dfc:	ec 01       	movw	r28, r24
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	49 f4       	brne	.+18     	; 0xe14 <xQueueGenericCreate+0x38>
     e02:	16 c0       	rjmp	.+44     	; 0xe30 <xQueueGenericCreate+0x54>
     e04:	0b 8f       	std	Y+27, r16	; 0x1b
     e06:	1c 8f       	std	Y+28, r17	; 0x1c
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	ce 01       	movw	r24, r28
     e0c:	0e 94 b1 06 	call	0xd62	; 0xd62 <xQueueGenericReset>
     e10:	f8 a2       	std	Y+32, r15	; 0x20
     e12:	0e c0       	rjmp	.+28     	; 0xe30 <xQueueGenericCreate+0x54>
     e14:	81 96       	adiw	r24, 0x21	; 33
     e16:	99 83       	std	Y+1, r25	; 0x01
     e18:	88 83       	st	Y, r24
     e1a:	f4 cf       	rjmp	.-24     	; 0xe04 <xQueueGenericCreate+0x28>
     e1c:	d9 83       	std	Y+1, r29	; 0x01
     e1e:	c8 83       	st	Y, r28
     e20:	f1 cf       	rjmp	.-30     	; 0xe04 <xQueueGenericCreate+0x28>
     e22:	81 e2       	ldi	r24, 0x21	; 33
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pvPortMalloc>
     e2a:	ec 01       	movw	r28, r24
     e2c:	89 2b       	or	r24, r25
     e2e:	b1 f7       	brne	.-20     	; 0xe1c <xQueueGenericCreate+0x40>
     e30:	ce 01       	movw	r24, r28
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	08 95       	ret

00000e3e <xQueueGenericSend>:
     e3e:	9f 92       	push	r9
     e40:	af 92       	push	r10
     e42:	bf 92       	push	r11
     e44:	cf 92       	push	r12
     e46:	df 92       	push	r13
     e48:	ef 92       	push	r14
     e4a:	ff 92       	push	r15
     e4c:	0f 93       	push	r16
     e4e:	1f 93       	push	r17
     e50:	cf 93       	push	r28
     e52:	df 93       	push	r29
     e54:	00 d0       	rcall	.+0      	; 0xe56 <xQueueGenericSend+0x18>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <xQueueGenericSend+0x1a>
     e58:	1f 92       	push	r1
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	8c 01       	movw	r16, r24
     e60:	6b 01       	movw	r12, r22
     e62:	5d 83       	std	Y+5, r21	; 0x05
     e64:	4c 83       	std	Y+4, r20	; 0x04
     e66:	a2 2e       	mov	r10, r18
     e68:	b1 2c       	mov	r11, r1
     e6a:	99 24       	eor	r9, r9
     e6c:	93 94       	inc	r9
     e6e:	7c 01       	movw	r14, r24
     e70:	88 e0       	ldi	r24, 0x08	; 8
     e72:	e8 0e       	add	r14, r24
     e74:	f1 1c       	adc	r15, r1
     e76:	0f b6       	in	r0, 0x3f	; 63
     e78:	f8 94       	cli
     e7a:	0f 92       	push	r0
     e7c:	f8 01       	movw	r30, r16
     e7e:	92 8d       	ldd	r25, Z+26	; 0x1a
     e80:	83 8d       	ldd	r24, Z+27	; 0x1b
     e82:	98 17       	cp	r25, r24
     e84:	18 f0       	brcs	.+6      	; 0xe8c <xQueueGenericSend+0x4e>
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	af 12       	cpse	r10, r31
     e8a:	19 c0       	rjmp	.+50     	; 0xebe <xQueueGenericSend+0x80>
     e8c:	4a 2d       	mov	r20, r10
     e8e:	b6 01       	movw	r22, r12
     e90:	c8 01       	movw	r24, r16
     e92:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <prvCopyDataToQueue>
     e96:	f8 01       	movw	r30, r16
     e98:	91 89       	ldd	r25, Z+17	; 0x11
     e9a:	99 23       	and	r25, r25
     e9c:	49 f0       	breq	.+18     	; 0xeb0 <xQueueGenericSend+0x72>
     e9e:	c8 01       	movw	r24, r16
     ea0:	41 96       	adiw	r24, 0x11	; 17
     ea2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
     ea6:	88 23       	and	r24, r24
     ea8:	31 f0       	breq	.+12     	; 0xeb6 <xQueueGenericSend+0x78>
     eaa:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <xQueueGenericSend+0x78>
     eb0:	81 11       	cpse	r24, r1
     eb2:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	50 c0       	rjmp	.+160    	; 0xf5e <xQueueGenericSend+0x120>
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	9d 81       	ldd	r25, Y+5	; 0x05
     ec2:	89 2b       	or	r24, r25
     ec4:	21 f4       	brne	.+8      	; 0xece <xQueueGenericSend+0x90>
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	48 c0       	rjmp	.+144    	; 0xf5e <xQueueGenericSend+0x120>
     ece:	b1 10       	cpse	r11, r1
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <xQueueGenericSend+0x9e>
     ed2:	ce 01       	movw	r24, r28
     ed4:	01 96       	adiw	r24, 0x01	; 1
     ed6:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vTaskSetTimeOutState>
     eda:	b9 2c       	mov	r11, r9
     edc:	0f 90       	pop	r0
     ede:	0f be       	out	0x3f, r0	; 63
     ee0:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskSuspendAll>
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	0f 92       	push	r0
     eea:	f8 01       	movw	r30, r16
     eec:	85 8d       	ldd	r24, Z+29	; 0x1d
     eee:	8f 3f       	cpi	r24, 0xFF	; 255
     ef0:	09 f4       	brne	.+2      	; 0xef4 <xQueueGenericSend+0xb6>
     ef2:	15 8e       	std	Z+29, r1	; 0x1d
     ef4:	f8 01       	movw	r30, r16
     ef6:	86 8d       	ldd	r24, Z+30	; 0x1e
     ef8:	8f 3f       	cpi	r24, 0xFF	; 255
     efa:	09 f4       	brne	.+2      	; 0xefe <xQueueGenericSend+0xc0>
     efc:	16 8e       	std	Z+30, r1	; 0x1e
     efe:	0f 90       	pop	r0
     f00:	0f be       	out	0x3f, r0	; 63
     f02:	be 01       	movw	r22, r28
     f04:	6c 5f       	subi	r22, 0xFC	; 252
     f06:	7f 4f       	sbci	r23, 0xFF	; 255
     f08:	ce 01       	movw	r24, r28
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <xTaskCheckForTimeOut>
     f10:	81 11       	cpse	r24, r1
     f12:	1f c0       	rjmp	.+62     	; 0xf52 <xQueueGenericSend+0x114>
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	0f 92       	push	r0
     f1a:	f8 01       	movw	r30, r16
     f1c:	92 8d       	ldd	r25, Z+26	; 0x1a
     f1e:	0f 90       	pop	r0
     f20:	0f be       	out	0x3f, r0	; 63
     f22:	83 8d       	ldd	r24, Z+27	; 0x1b
     f24:	98 13       	cpse	r25, r24
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <xQueueGenericSend+0x108>
     f28:	6c 81       	ldd	r22, Y+4	; 0x04
     f2a:	7d 81       	ldd	r23, Y+5	; 0x05
     f2c:	c7 01       	movw	r24, r14
     f2e:	0e 94 98 0c 	call	0x1930	; 0x1930 <vTaskPlaceOnEventList>
     f32:	c8 01       	movw	r24, r16
     f34:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
     f38:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
     f3c:	81 11       	cpse	r24, r1
     f3e:	9b cf       	rjmp	.-202    	; 0xe76 <xQueueGenericSend+0x38>
     f40:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
     f44:	98 cf       	rjmp	.-208    	; 0xe76 <xQueueGenericSend+0x38>
     f46:	c8 01       	movw	r24, r16
     f48:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
     f4c:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
     f50:	92 cf       	rjmp	.-220    	; 0xe76 <xQueueGenericSend+0x38>
     f52:	c8 01       	movw	r24, r16
     f54:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
     f58:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
     f5c:	80 e0       	ldi	r24, 0x00	; 0
     f5e:	0f 90       	pop	r0
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	08 95       	ret

00000f80 <xQueueCreateMutex>:
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	48 2f       	mov	r20, r24
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	81 e0       	ldi	r24, 0x01	; 1
     f8a:	0e 94 ee 06 	call	0xddc	; 0xddc <xQueueGenericCreate>
     f8e:	ec 01       	movw	r28, r24
     f90:	00 97       	sbiw	r24, 0x00	; 0
     f92:	61 f0       	breq	.+24     	; 0xfac <xQueueCreateMutex+0x2c>
     f94:	1b 82       	std	Y+3, r1	; 0x03
     f96:	1a 82       	std	Y+2, r1	; 0x02
     f98:	19 82       	std	Y+1, r1	; 0x01
     f9a:	18 82       	st	Y, r1
     f9c:	1e 82       	std	Y+6, r1	; 0x06
     f9e:	20 e0       	ldi	r18, 0x00	; 0
     fa0:	40 e0       	ldi	r20, 0x00	; 0
     fa2:	50 e0       	ldi	r21, 0x00	; 0
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	70 e0       	ldi	r23, 0x00	; 0
     fa8:	0e 94 1f 07 	call	0xe3e	; 0xe3e <xQueueGenericSend>
     fac:	ce 01       	movw	r24, r28
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	08 95       	ret

00000fb4 <xQueueGenericSendFromISR>:
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	df 93       	push	r29
     fc0:	8a 01       	movw	r16, r20
     fc2:	fc 01       	movw	r30, r24
     fc4:	52 8d       	ldd	r21, Z+26	; 0x1a
     fc6:	33 8d       	ldd	r19, Z+27	; 0x1b
     fc8:	53 17       	cp	r21, r19
     fca:	10 f0       	brcs	.+4      	; 0xfd0 <xQueueGenericSendFromISR+0x1c>
     fcc:	22 30       	cpi	r18, 0x02	; 2
     fce:	f1 f4       	brne	.+60     	; 0x100c <xQueueGenericSendFromISR+0x58>
     fd0:	42 2f       	mov	r20, r18
     fd2:	78 01       	movw	r14, r16
     fd4:	ec 01       	movw	r28, r24
     fd6:	1e 8d       	ldd	r17, Y+30	; 0x1e
     fd8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <prvCopyDataToQueue>
     fdc:	1f 3f       	cpi	r17, 0xFF	; 255
     fde:	81 f4       	brne	.+32     	; 0x1000 <xQueueGenericSendFromISR+0x4c>
     fe0:	89 89       	ldd	r24, Y+17	; 0x11
     fe2:	88 23       	and	r24, r24
     fe4:	a9 f0       	breq	.+42     	; 0x1010 <xQueueGenericSendFromISR+0x5c>
     fe6:	ce 01       	movw	r24, r28
     fe8:	41 96       	adiw	r24, 0x11	; 17
     fea:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
     fee:	88 23       	and	r24, r24
     ff0:	89 f0       	breq	.+34     	; 0x1014 <xQueueGenericSendFromISR+0x60>
     ff2:	e1 14       	cp	r14, r1
     ff4:	f1 04       	cpc	r15, r1
     ff6:	81 f0       	breq	.+32     	; 0x1018 <xQueueGenericSendFromISR+0x64>
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	f7 01       	movw	r30, r14
     ffc:	80 83       	st	Z, r24
     ffe:	0d c0       	rjmp	.+26     	; 0x101a <xQueueGenericSendFromISR+0x66>
    1000:	ff 24       	eor	r15, r15
    1002:	f3 94       	inc	r15
    1004:	f1 0e       	add	r15, r17
    1006:	fe 8e       	std	Y+30, r15	; 0x1e
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	07 c0       	rjmp	.+14     	; 0x101a <xQueueGenericSendFromISR+0x66>
    100c:	80 e0       	ldi	r24, 0x00	; 0
    100e:	05 c0       	rjmp	.+10     	; 0x101a <xQueueGenericSendFromISR+0x66>
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	03 c0       	rjmp	.+6      	; 0x101a <xQueueGenericSendFromISR+0x66>
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	01 c0       	rjmp	.+2      	; 0x101a <xQueueGenericSendFromISR+0x66>
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	df 91       	pop	r29
    101c:	cf 91       	pop	r28
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	ff 90       	pop	r15
    1024:	ef 90       	pop	r14
    1026:	08 95       	ret

00001028 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
    1028:	8f 92       	push	r8
    102a:	9f 92       	push	r9
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	00 d0       	rcall	.+0      	; 0x1042 <xQueueGenericReceive+0x1a>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <xQueueGenericReceive+0x1c>
    1044:	1f 92       	push	r1
    1046:	cd b7       	in	r28, 0x3d	; 61
    1048:	de b7       	in	r29, 0x3e	; 62
    104a:	8c 01       	movw	r16, r24
    104c:	5b 01       	movw	r10, r22
    104e:	5d 83       	std	Y+5, r21	; 0x05
    1050:	4c 83       	std	Y+4, r20	; 0x04
    1052:	82 2e       	mov	r8, r18
BaseType_t xEntryTimeSet = pdFALSE;
    1054:	e1 2c       	mov	r14, r1
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
    1056:	99 24       	eor	r9, r9
    1058:	93 94       	inc	r9
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    105a:	6c 01       	movw	r12, r24
    105c:	81 e1       	ldi	r24, 0x11	; 17
    105e:	c8 0e       	add	r12, r24
    1060:	d1 1c       	adc	r13, r1
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	0f 92       	push	r0
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1068:	f8 01       	movw	r30, r16
    106a:	f2 8c       	ldd	r15, Z+26	; 0x1a

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    106c:	ff 20       	and	r15, r15
    106e:	91 f1       	breq	.+100    	; 0x10d4 <xQueueGenericReceive+0xac>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
    1070:	c6 80       	ldd	r12, Z+6	; 0x06
    1072:	d7 80       	ldd	r13, Z+7	; 0x07

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1074:	b5 01       	movw	r22, r10
    1076:	c8 01       	movw	r24, r16
    1078:	0e 94 4a 06 	call	0xc94	; 0xc94 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    107c:	81 10       	cpse	r8, r1
    107e:	19 c0       	rjmp	.+50     	; 0x10b2 <xQueueGenericReceive+0x8a>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
    1080:	fa 94       	dec	r15
    1082:	f8 01       	movw	r30, r16
    1084:	f2 8e       	std	Z+26, r15	; 0x1a

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    1086:	80 81       	ld	r24, Z
    1088:	91 81       	ldd	r25, Z+1	; 0x01
    108a:	89 2b       	or	r24, r25
    108c:	29 f4       	brne	.+10     	; 0x1098 <xQueueGenericReceive+0x70>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
    108e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <pvTaskIncrementMutexHeldCount>
    1092:	f8 01       	movw	r30, r16
    1094:	93 83       	std	Z+3, r25	; 0x03
    1096:	82 83       	std	Z+2, r24	; 0x02
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1098:	f8 01       	movw	r30, r16
    109a:	80 85       	ldd	r24, Z+8	; 0x08
    109c:	88 23       	and	r24, r24
    109e:	b1 f0       	breq	.+44     	; 0x10cc <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    10a0:	c8 01       	movw	r24, r16
    10a2:	08 96       	adiw	r24, 0x08	; 8
    10a4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
    10a8:	88 23       	and	r24, r24
    10aa:	81 f0       	breq	.+32     	; 0x10cc <xQueueGenericReceive+0xa4>
						{
							queueYIELD_IF_USING_PREEMPTION();
    10ac:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    10b0:	0d c0       	rjmp	.+26     	; 0x10cc <xQueueGenericReceive+0xa4>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
    10b2:	f8 01       	movw	r30, r16
    10b4:	d7 82       	std	Z+7, r13	; 0x07
    10b6:	c6 82       	std	Z+6, r12	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    10b8:	81 89       	ldd	r24, Z+17	; 0x11
    10ba:	88 23       	and	r24, r24
    10bc:	39 f0       	breq	.+14     	; 0x10cc <xQueueGenericReceive+0xa4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    10be:	c8 01       	movw	r24, r16
    10c0:	41 96       	adiw	r24, 0x11	; 17
    10c2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <xTaskRemoveFromEventList>
    10c6:	81 11       	cpse	r24, r1
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
    10c8:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
    10cc:	0f 90       	pop	r0
    10ce:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	64 c0       	rjmp	.+200    	; 0x119c <xQueueGenericReceive+0x174>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
    10d4:	8c 81       	ldd	r24, Y+4	; 0x04
    10d6:	9d 81       	ldd	r25, Y+5	; 0x05
    10d8:	89 2b       	or	r24, r25
    10da:	21 f4       	brne	.+8      	; 0x10e4 <xQueueGenericReceive+0xbc>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    10e0:	80 e0       	ldi	r24, 0x00	; 0
    10e2:	5c c0       	rjmp	.+184    	; 0x119c <xQueueGenericReceive+0x174>
				}
				else if( xEntryTimeSet == pdFALSE )
    10e4:	e1 10       	cpse	r14, r1
    10e6:	05 c0       	rjmp	.+10     	; 0x10f2 <xQueueGenericReceive+0xca>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    10e8:	ce 01       	movw	r24, r28
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    10f0:	e9 2c       	mov	r14, r9
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
    10f2:	0f 90       	pop	r0
    10f4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    10f6:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    10fa:	0f b6       	in	r0, 0x3f	; 63
    10fc:	f8 94       	cli
    10fe:	0f 92       	push	r0
    1100:	f8 01       	movw	r30, r16
    1102:	85 8d       	ldd	r24, Z+29	; 0x1d
    1104:	8f 3f       	cpi	r24, 0xFF	; 255
    1106:	09 f4       	brne	.+2      	; 0x110a <xQueueGenericReceive+0xe2>
    1108:	15 8e       	std	Z+29, r1	; 0x1d
    110a:	f8 01       	movw	r30, r16
    110c:	86 8d       	ldd	r24, Z+30	; 0x1e
    110e:	8f 3f       	cpi	r24, 0xFF	; 255
    1110:	09 f4       	brne	.+2      	; 0x1114 <xQueueGenericReceive+0xec>
    1112:	16 8e       	std	Z+30, r1	; 0x1e
    1114:	0f 90       	pop	r0
    1116:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1118:	be 01       	movw	r22, r28
    111a:	6c 5f       	subi	r22, 0xFC	; 252
    111c:	7f 4f       	sbci	r23, 0xFF	; 255
    111e:	ce 01       	movw	r24, r28
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <xTaskCheckForTimeOut>
    1126:	81 11       	cpse	r24, r1
    1128:	2b c0       	rjmp	.+86     	; 0x1180 <xQueueGenericReceive+0x158>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1130:	f8 01       	movw	r30, r16
    1132:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1134:	0f 90       	pop	r0
    1136:	0f be       	out	0x3f, r0	; 63
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1138:	81 11       	cpse	r24, r1
    113a:	1c c0       	rjmp	.+56     	; 0x1174 <xQueueGenericReceive+0x14c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
    113c:	80 81       	ld	r24, Z
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	89 2b       	or	r24, r25
    1142:	49 f4       	brne	.+18     	; 0x1156 <xQueueGenericReceive+0x12e>
					{
						taskENTER_CRITICAL();
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	0f 92       	push	r0
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
    1152:	0f 90       	pop	r0
    1154:	0f be       	out	0x3f, r0	; 63
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    1156:	6c 81       	ldd	r22, Y+4	; 0x04
    1158:	7d 81       	ldd	r23, Y+5	; 0x05
    115a:	c6 01       	movw	r24, r12
    115c:	0e 94 98 0c 	call	0x1930	; 0x1930 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    1160:	c8 01       	movw	r24, r16
    1162:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    1166:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
    116a:	81 11       	cpse	r24, r1
    116c:	7a cf       	rjmp	.-268    	; 0x1062 <xQueueGenericReceive+0x3a>
				{
					portYIELD_WITHIN_API();
    116e:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    1172:	77 cf       	rjmp	.-274    	; 0x1062 <xQueueGenericReceive+0x3a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1174:	c8 01       	movw	r24, r16
    1176:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    117a:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
    117e:	71 cf       	rjmp	.-286    	; 0x1062 <xQueueGenericReceive+0x3a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    1180:	c8 01       	movw	r24, r16
    1182:	0e 94 64 06 	call	0xcc8	; 0xcc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1186:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
    118a:	0f b6       	in	r0, 0x3f	; 63
    118c:	f8 94       	cli
    118e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1190:	f8 01       	movw	r30, r16
    1192:	82 8d       	ldd	r24, Z+26	; 0x1a
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
		else
		{
			prvUnlockQueue( pxQueue );
			( void ) xTaskResumeAll();

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    1198:	81 11       	cpse	r24, r1
    119a:	63 cf       	rjmp	.-314    	; 0x1062 <xQueueGenericReceive+0x3a>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
    119c:	0f 90       	pop	r0
    119e:	0f 90       	pop	r0
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	df 90       	pop	r13
    11b4:	cf 90       	pop	r12
    11b6:	bf 90       	pop	r11
    11b8:	af 90       	pop	r10
    11ba:	9f 90       	pop	r9
    11bc:	8f 90       	pop	r8
    11be:	08 95       	ret

000011c0 <prvResetNextTaskUnblockTime>:
	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */

	return uxReturn;
}
    11c0:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    11c4:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    11c8:	80 81       	ld	r24, Z
    11ca:	81 11       	cpse	r24, r1
    11cc:	07 c0       	rjmp	.+14     	; 0x11dc <prvResetNextTaskUnblockTime+0x1c>
    11ce:	8f ef       	ldi	r24, 0xFF	; 255
    11d0:	9f ef       	ldi	r25, 0xFF	; 255
    11d2:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    11d6:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    11da:	08 95       	ret
    11dc:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    11e0:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    11e4:	05 80       	ldd	r0, Z+5	; 0x05
    11e6:	f6 81       	ldd	r31, Z+6	; 0x06
    11e8:	e0 2d       	mov	r30, r0
    11ea:	06 80       	ldd	r0, Z+6	; 0x06
    11ec:	f7 81       	ldd	r31, Z+7	; 0x07
    11ee:	e0 2d       	mov	r30, r0
    11f0:	82 81       	ldd	r24, Z+2	; 0x02
    11f2:	93 81       	ldd	r25, Z+3	; 0x03
    11f4:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    11f8:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    11fc:	08 95       	ret

000011fe <prvAddCurrentTaskToDelayedList>:
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	ec 01       	movw	r28, r24
    1208:	00 91 98 05 	lds	r16, 0x0598	; 0x800598 <xTickCount>
    120c:	10 91 99 05 	lds	r17, 0x0599	; 0x800599 <xTickCount+0x1>
    1210:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1214:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1218:	02 96       	adiw	r24, 0x02	; 2
    121a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    121e:	c0 0f       	add	r28, r16
    1220:	d1 1f       	adc	r29, r17
    1222:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1226:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    122a:	d3 83       	std	Z+3, r29	; 0x03
    122c:	c2 83       	std	Z+2, r28	; 0x02
    122e:	c0 17       	cp	r28, r16
    1230:	d1 07       	cpc	r29, r17
    1232:	68 f4       	brcc	.+26     	; 0x124e <prvAddCurrentTaskToDelayedList+0x50>
    1234:	60 91 e8 05 	lds	r22, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1238:	70 91 e9 05 	lds	r23, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    123c:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <pxOverflowDelayedTaskList>
    1240:	90 91 af 05 	lds	r25, 0x05AF	; 0x8005af <pxOverflowDelayedTaskList+0x1>
    1244:	6e 5f       	subi	r22, 0xFE	; 254
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	0e 94 37 02 	call	0x46e	; 0x46e <vListInsert>
    124c:	17 c0       	rjmp	.+46     	; 0x127c <prvAddCurrentTaskToDelayedList+0x7e>
    124e:	60 91 e8 05 	lds	r22, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1252:	70 91 e9 05 	lds	r23, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1256:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    125a:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    125e:	6e 5f       	subi	r22, 0xFE	; 254
    1260:	7f 4f       	sbci	r23, 0xFF	; 255
    1262:	0e 94 37 02 	call	0x46e	; 0x46e <vListInsert>
    1266:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <xNextTaskUnblockTime>
    126a:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <xNextTaskUnblockTime+0x1>
    126e:	c8 17       	cp	r28, r24
    1270:	d9 07       	cpc	r29, r25
    1272:	20 f4       	brcc	.+8      	; 0x127c <prvAddCurrentTaskToDelayedList+0x7e>
    1274:	d0 93 91 05 	sts	0x0591, r29	; 0x800591 <xNextTaskUnblockTime+0x1>
    1278:	c0 93 90 05 	sts	0x0590, r28	; 0x800590 <xNextTaskUnblockTime>
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <xTaskCreate>:
    1286:	4f 92       	push	r4
    1288:	5f 92       	push	r5
    128a:	6f 92       	push	r6
    128c:	7f 92       	push	r7
    128e:	8f 92       	push	r8
    1290:	9f 92       	push	r9
    1292:	af 92       	push	r10
    1294:	bf 92       	push	r11
    1296:	cf 92       	push	r12
    1298:	df 92       	push	r13
    129a:	ef 92       	push	r14
    129c:	ff 92       	push	r15
    129e:	0f 93       	push	r16
    12a0:	cf 93       	push	r28
    12a2:	df 93       	push	r29
    12a4:	4c 01       	movw	r8, r24
    12a6:	6b 01       	movw	r12, r22
    12a8:	5a 01       	movw	r10, r20
    12aa:	29 01       	movw	r4, r18
    12ac:	ca 01       	movw	r24, r20
    12ae:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pvPortMalloc>
    12b2:	3c 01       	movw	r6, r24
    12b4:	89 2b       	or	r24, r25
    12b6:	09 f4       	brne	.+2      	; 0x12ba <xTaskCreate+0x34>
    12b8:	ea c0       	rjmp	.+468    	; 0x148e <xTaskCreate+0x208>
    12ba:	8c e2       	ldi	r24, 0x2C	; 44
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <pvPortMalloc>
    12c2:	ec 01       	movw	r28, r24
    12c4:	89 2b       	or	r24, r25
    12c6:	b1 f0       	breq	.+44     	; 0x12f4 <xTaskCreate+0x6e>
    12c8:	78 8e       	std	Y+24, r7	; 0x18
    12ca:	6f 8a       	std	Y+23, r6	; 0x17
    12cc:	a5 01       	movw	r20, r10
    12ce:	65 ea       	ldi	r22, 0xA5	; 165
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	c3 01       	movw	r24, r6
    12d4:	0e 94 33 0f 	call	0x1e66	; 0x1e66 <memset>
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	a8 1a       	sub	r10, r24
    12dc:	b1 08       	sbc	r11, r1
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	a8 0e       	add	r10, r24
    12e4:	b9 1e       	adc	r11, r25
    12e6:	d6 01       	movw	r26, r12
    12e8:	8c 91       	ld	r24, X
    12ea:	89 8f       	std	Y+25, r24	; 0x19
    12ec:	8c 91       	ld	r24, X
    12ee:	81 11       	cpse	r24, r1
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <xTaskCreate+0x76>
    12f2:	18 c0       	rjmp	.+48     	; 0x1324 <xTaskCreate+0x9e>
    12f4:	c3 01       	movw	r24, r6
    12f6:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    12fa:	c9 c0       	rjmp	.+402    	; 0x148e <xTaskCreate+0x208>
    12fc:	ae 01       	movw	r20, r28
    12fe:	46 5e       	subi	r20, 0xE6	; 230
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	f6 01       	movw	r30, r12
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	b8 e0       	ldi	r27, 0x08	; 8
    1308:	cb 0e       	add	r12, r27
    130a:	d1 1c       	adc	r13, r1
    130c:	cf 01       	movw	r24, r30
    130e:	21 91       	ld	r18, Z+
    1310:	da 01       	movw	r26, r20
    1312:	2d 93       	st	X+, r18
    1314:	ad 01       	movw	r20, r26
    1316:	dc 01       	movw	r26, r24
    1318:	8c 91       	ld	r24, X
    131a:	88 23       	and	r24, r24
    131c:	19 f0       	breq	.+6      	; 0x1324 <xTaskCreate+0x9e>
    131e:	ec 15       	cp	r30, r12
    1320:	fd 05       	cpc	r31, r13
    1322:	a1 f7       	brne	.-24     	; 0x130c <xTaskCreate+0x86>
    1324:	18 a2       	std	Y+32, r1	; 0x20
    1326:	04 30       	cpi	r16, 0x04	; 4
    1328:	08 f0       	brcs	.+2      	; 0x132c <xTaskCreate+0xa6>
    132a:	03 e0       	ldi	r16, 0x03	; 3
    132c:	0e 8b       	std	Y+22, r16	; 0x16
    132e:	0b a3       	std	Y+35, r16	; 0x23
    1330:	1c a2       	std	Y+36, r1	; 0x24
    1332:	6e 01       	movw	r12, r28
    1334:	b2 e0       	ldi	r27, 0x02	; 2
    1336:	cb 0e       	add	r12, r27
    1338:	d1 1c       	adc	r13, r1
    133a:	c6 01       	movw	r24, r12
    133c:	0e 94 12 02 	call	0x424	; 0x424 <vListInitialiseItem>
    1340:	ce 01       	movw	r24, r28
    1342:	0c 96       	adiw	r24, 0x0c	; 12
    1344:	0e 94 12 02 	call	0x424	; 0x424 <vListInitialiseItem>
    1348:	d9 87       	std	Y+9, r29	; 0x09
    134a:	c8 87       	std	Y+8, r28	; 0x08
    134c:	84 e0       	ldi	r24, 0x04	; 4
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	80 1b       	sub	r24, r16
    1352:	91 09       	sbc	r25, r1
    1354:	9d 87       	std	Y+13, r25	; 0x0d
    1356:	8c 87       	std	Y+12, r24	; 0x0c
    1358:	db 8b       	std	Y+19, r29	; 0x13
    135a:	ca 8b       	std	Y+18, r28	; 0x12
    135c:	1e a2       	std	Y+38, r1	; 0x26
    135e:	1d a2       	std	Y+37, r1	; 0x25
    1360:	1f a2       	std	Y+39, r1	; 0x27
    1362:	18 a6       	std	Y+40, r1	; 0x28
    1364:	19 a6       	std	Y+41, r1	; 0x29
    1366:	1a a6       	std	Y+42, r1	; 0x2a
    1368:	1b a6       	std	Y+43, r1	; 0x2b
    136a:	a2 01       	movw	r20, r4
    136c:	b4 01       	movw	r22, r8
    136e:	c5 01       	movw	r24, r10
    1370:	0e 94 8e 02 	call	0x51c	; 0x51c <pxPortInitialiseStack>
    1374:	99 83       	std	Y+1, r25	; 0x01
    1376:	88 83       	st	Y, r24
    1378:	e1 14       	cp	r14, r1
    137a:	f1 04       	cpc	r15, r1
    137c:	19 f0       	breq	.+6      	; 0x1384 <xTaskCreate+0xfe>
    137e:	f7 01       	movw	r30, r14
    1380:	d1 83       	std	Z+1, r29	; 0x01
    1382:	c0 83       	st	Z, r28
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	0f 92       	push	r0
    138a:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <uxCurrentNumberOfTasks>
    138e:	8f 5f       	subi	r24, 0xFF	; 255
    1390:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <uxCurrentNumberOfTasks>
    1394:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1398:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    139c:	89 2b       	or	r24, r25
    139e:	a9 f5       	brne	.+106    	; 0x140a <xTaskCreate+0x184>
    13a0:	d0 93 e9 05 	sts	0x05E9, r29	; 0x8005e9 <pxCurrentTCB+0x1>
    13a4:	c0 93 e8 05 	sts	0x05E8, r28	; 0x8005e8 <pxCurrentTCB>
    13a8:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <uxCurrentNumberOfTasks>
    13ac:	81 30       	cpi	r24, 0x01	; 1
    13ae:	e9 f5       	brne	.+122    	; 0x142a <xTaskCreate+0x1a4>
    13b0:	84 ec       	ldi	r24, 0xC4	; 196
    13b2:	95 e0       	ldi	r25, 0x05	; 5
    13b4:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13b8:	8d ec       	ldi	r24, 0xCD	; 205
    13ba:	95 e0       	ldi	r25, 0x05	; 5
    13bc:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13c0:	86 ed       	ldi	r24, 0xD6	; 214
    13c2:	95 e0       	ldi	r25, 0x05	; 5
    13c4:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13c8:	8f ed       	ldi	r24, 0xDF	; 223
    13ca:	95 e0       	ldi	r25, 0x05	; 5
    13cc:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13d0:	8b eb       	ldi	r24, 0xBB	; 187
    13d2:	95 e0       	ldi	r25, 0x05	; 5
    13d4:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13d8:	82 eb       	ldi	r24, 0xB2	; 178
    13da:	95 e0       	ldi	r25, 0x05	; 5
    13dc:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13e0:	85 ea       	ldi	r24, 0xA5	; 165
    13e2:	95 e0       	ldi	r25, 0x05	; 5
    13e4:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13e8:	8c e9       	ldi	r24, 0x9C	; 156
    13ea:	95 e0       	ldi	r25, 0x05	; 5
    13ec:	0e 94 04 02 	call	0x408	; 0x408 <vListInitialise>
    13f0:	8b eb       	ldi	r24, 0xBB	; 187
    13f2:	95 e0       	ldi	r25, 0x05	; 5
    13f4:	90 93 b1 05 	sts	0x05B1, r25	; 0x8005b1 <pxDelayedTaskList+0x1>
    13f8:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <pxDelayedTaskList>
    13fc:	82 eb       	ldi	r24, 0xB2	; 178
    13fe:	95 e0       	ldi	r25, 0x05	; 5
    1400:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <pxOverflowDelayedTaskList+0x1>
    1404:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <pxOverflowDelayedTaskList>
    1408:	10 c0       	rjmp	.+32     	; 0x142a <xTaskCreate+0x1a4>
    140a:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <xSchedulerRunning>
    140e:	81 11       	cpse	r24, r1
    1410:	0c c0       	rjmp	.+24     	; 0x142a <xTaskCreate+0x1a4>
    1412:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1416:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    141a:	96 89       	ldd	r25, Z+22	; 0x16
    141c:	8e 89       	ldd	r24, Y+22	; 0x16
    141e:	89 17       	cp	r24, r25
    1420:	20 f0       	brcs	.+8      	; 0x142a <xTaskCreate+0x1a4>
    1422:	d0 93 e9 05 	sts	0x05E9, r29	; 0x8005e9 <pxCurrentTCB+0x1>
    1426:	c0 93 e8 05 	sts	0x05E8, r28	; 0x8005e8 <pxCurrentTCB>
    142a:	80 91 92 05 	lds	r24, 0x0592	; 0x800592 <uxTaskNumber>
    142e:	8f 5f       	subi	r24, 0xFF	; 255
    1430:	80 93 92 05 	sts	0x0592, r24	; 0x800592 <uxTaskNumber>
    1434:	89 a3       	std	Y+33, r24	; 0x21
    1436:	8e 89       	ldd	r24, Y+22	; 0x16
    1438:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    143c:	98 17       	cp	r25, r24
    143e:	10 f4       	brcc	.+4      	; 0x1444 <xTaskCreate+0x1be>
    1440:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	9c 01       	movw	r18, r24
    1448:	22 0f       	add	r18, r18
    144a:	33 1f       	adc	r19, r19
    144c:	22 0f       	add	r18, r18
    144e:	33 1f       	adc	r19, r19
    1450:	22 0f       	add	r18, r18
    1452:	33 1f       	adc	r19, r19
    1454:	82 0f       	add	r24, r18
    1456:	93 1f       	adc	r25, r19
    1458:	b6 01       	movw	r22, r12
    145a:	8c 53       	subi	r24, 0x3C	; 60
    145c:	9a 4f       	sbci	r25, 0xFA	; 250
    145e:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	80 91 96 05 	lds	r24, 0x0596	; 0x800596 <xSchedulerRunning>
    146a:	88 23       	and	r24, r24
    146c:	61 f0       	breq	.+24     	; 0x1486 <xTaskCreate+0x200>
    146e:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1472:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1476:	96 89       	ldd	r25, Z+22	; 0x16
    1478:	8e 89       	ldd	r24, Y+22	; 0x16
    147a:	98 17       	cp	r25, r24
    147c:	30 f4       	brcc	.+12     	; 0x148a <xTaskCreate+0x204>
    147e:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    1482:	81 e0       	ldi	r24, 0x01	; 1
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <xTaskCreate+0x20a>
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	03 c0       	rjmp	.+6      	; 0x1490 <xTaskCreate+0x20a>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	01 c0       	rjmp	.+2      	; 0x1490 <xTaskCreate+0x20a>
    148e:	8f ef       	ldi	r24, 0xFF	; 255
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	0f 91       	pop	r16
    1496:	ff 90       	pop	r15
    1498:	ef 90       	pop	r14
    149a:	df 90       	pop	r13
    149c:	cf 90       	pop	r12
    149e:	bf 90       	pop	r11
    14a0:	af 90       	pop	r10
    14a2:	9f 90       	pop	r9
    14a4:	8f 90       	pop	r8
    14a6:	7f 90       	pop	r7
    14a8:	6f 90       	pop	r6
    14aa:	5f 90       	pop	r5
    14ac:	4f 90       	pop	r4
    14ae:	08 95       	ret

000014b0 <vTaskStartScheduler>:
    14b0:	ef 92       	push	r14
    14b2:	ff 92       	push	r15
    14b4:	0f 93       	push	r16
    14b6:	0f 2e       	mov	r0, r31
    14b8:	fe e8       	ldi	r31, 0x8E	; 142
    14ba:	ef 2e       	mov	r14, r31
    14bc:	f5 e0       	ldi	r31, 0x05	; 5
    14be:	ff 2e       	mov	r15, r31
    14c0:	f0 2d       	mov	r31, r0
    14c2:	00 e0       	ldi	r16, 0x00	; 0
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	45 e5       	ldi	r20, 0x55	; 85
    14ca:	50 e0       	ldi	r21, 0x00	; 0
    14cc:	69 e4       	ldi	r22, 0x49	; 73
    14ce:	71 e0       	ldi	r23, 0x01	; 1
    14d0:	86 ed       	ldi	r24, 0xD6	; 214
    14d2:	9b e0       	ldi	r25, 0x0B	; 11
    14d4:	0e 94 43 09 	call	0x1286	; 0x1286 <xTaskCreate>
    14d8:	81 30       	cpi	r24, 0x01	; 1
    14da:	81 f4       	brne	.+32     	; 0x14fc <vTaskStartScheduler+0x4c>
    14dc:	f8 94       	cli
    14de:	8f ef       	ldi	r24, 0xFF	; 255
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    14e6:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <xSchedulerRunning>
    14f0:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <xTickCount+0x1>
    14f4:	10 92 98 05 	sts	0x0598, r1	; 0x800598 <xTickCount>
    14f8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <xPortStartScheduler>
    14fc:	0f 91       	pop	r16
    14fe:	ff 90       	pop	r15
    1500:	ef 90       	pop	r14
    1502:	08 95       	ret

00001504 <vTaskSuspendAll>:
    1504:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    1508:	8f 5f       	subi	r24, 0xFF	; 255
    150a:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <uxSchedulerSuspended>
    150e:	08 95       	ret

00001510 <xTaskIncrementTick>:
    1510:	cf 92       	push	r12
    1512:	df 92       	push	r13
    1514:	ef 92       	push	r14
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    1524:	81 11       	cpse	r24, r1
    1526:	99 c0       	rjmp	.+306    	; 0x165a <xTaskIncrementTick+0x14a>
    1528:	e0 90 98 05 	lds	r14, 0x0598	; 0x800598 <xTickCount>
    152c:	f0 90 99 05 	lds	r15, 0x0599	; 0x800599 <xTickCount+0x1>
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	e8 1a       	sub	r14, r24
    1534:	f8 0a       	sbc	r15, r24
    1536:	f0 92 99 05 	sts	0x0599, r15	; 0x800599 <xTickCount+0x1>
    153a:	e0 92 98 05 	sts	0x0598, r14	; 0x800598 <xTickCount>
    153e:	e1 14       	cp	r14, r1
    1540:	f1 04       	cpc	r15, r1
    1542:	b9 f4       	brne	.+46     	; 0x1572 <xTaskIncrementTick+0x62>
    1544:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    1548:	90 91 b1 05 	lds	r25, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    154c:	20 91 ae 05 	lds	r18, 0x05AE	; 0x8005ae <pxOverflowDelayedTaskList>
    1550:	30 91 af 05 	lds	r19, 0x05AF	; 0x8005af <pxOverflowDelayedTaskList+0x1>
    1554:	30 93 b1 05 	sts	0x05B1, r19	; 0x8005b1 <pxDelayedTaskList+0x1>
    1558:	20 93 b0 05 	sts	0x05B0, r18	; 0x8005b0 <pxDelayedTaskList>
    155c:	90 93 af 05 	sts	0x05AF, r25	; 0x8005af <pxOverflowDelayedTaskList+0x1>
    1560:	80 93 ae 05 	sts	0x05AE, r24	; 0x8005ae <pxOverflowDelayedTaskList>
    1564:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <xNumOfOverflows>
    1568:	8f 5f       	subi	r24, 0xFF	; 255
    156a:	80 93 93 05 	sts	0x0593, r24	; 0x800593 <xNumOfOverflows>
    156e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <prvResetNextTaskUnblockTime>
    1572:	80 91 90 05 	lds	r24, 0x0590	; 0x800590 <xNextTaskUnblockTime>
    1576:	90 91 91 05 	lds	r25, 0x0591	; 0x800591 <xNextTaskUnblockTime+0x1>
    157a:	e8 16       	cp	r14, r24
    157c:	f9 06       	cpc	r15, r25
    157e:	10 f4       	brcc	.+4      	; 0x1584 <xTaskIncrementTick+0x74>
    1580:	d1 2c       	mov	r13, r1
    1582:	53 c0       	rjmp	.+166    	; 0x162a <xTaskIncrementTick+0x11a>
    1584:	d1 2c       	mov	r13, r1
    1586:	cc 24       	eor	r12, r12
    1588:	c3 94       	inc	r12
    158a:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    158e:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    1592:	80 81       	ld	r24, Z
    1594:	81 11       	cpse	r24, r1
    1596:	07 c0       	rjmp	.+14     	; 0x15a6 <xTaskIncrementTick+0x96>
    1598:	8f ef       	ldi	r24, 0xFF	; 255
    159a:	9f ef       	ldi	r25, 0xFF	; 255
    159c:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    15a0:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    15a4:	42 c0       	rjmp	.+132    	; 0x162a <xTaskIncrementTick+0x11a>
    15a6:	e0 91 b0 05 	lds	r30, 0x05B0	; 0x8005b0 <pxDelayedTaskList>
    15aa:	f0 91 b1 05 	lds	r31, 0x05B1	; 0x8005b1 <pxDelayedTaskList+0x1>
    15ae:	05 80       	ldd	r0, Z+5	; 0x05
    15b0:	f6 81       	ldd	r31, Z+6	; 0x06
    15b2:	e0 2d       	mov	r30, r0
    15b4:	c6 81       	ldd	r28, Z+6	; 0x06
    15b6:	d7 81       	ldd	r29, Z+7	; 0x07
    15b8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ba:	9b 81       	ldd	r25, Y+3	; 0x03
    15bc:	e8 16       	cp	r14, r24
    15be:	f9 06       	cpc	r15, r25
    15c0:	28 f4       	brcc	.+10     	; 0x15cc <xTaskIncrementTick+0xbc>
    15c2:	90 93 91 05 	sts	0x0591, r25	; 0x800591 <xNextTaskUnblockTime+0x1>
    15c6:	80 93 90 05 	sts	0x0590, r24	; 0x800590 <xNextTaskUnblockTime>
    15ca:	2f c0       	rjmp	.+94     	; 0x162a <xTaskIncrementTick+0x11a>
    15cc:	8e 01       	movw	r16, r28
    15ce:	0e 5f       	subi	r16, 0xFE	; 254
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	c8 01       	movw	r24, r16
    15d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    15d8:	8c 89       	ldd	r24, Y+20	; 0x14
    15da:	9d 89       	ldd	r25, Y+21	; 0x15
    15dc:	89 2b       	or	r24, r25
    15de:	21 f0       	breq	.+8      	; 0x15e8 <xTaskIncrementTick+0xd8>
    15e0:	ce 01       	movw	r24, r28
    15e2:	0c 96       	adiw	r24, 0x0c	; 12
    15e4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    15e8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ea:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    15ee:	98 17       	cp	r25, r24
    15f0:	10 f4       	brcc	.+4      	; 0x15f6 <xTaskIncrementTick+0xe6>
    15f2:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	9c 01       	movw	r18, r24
    15fa:	22 0f       	add	r18, r18
    15fc:	33 1f       	adc	r19, r19
    15fe:	22 0f       	add	r18, r18
    1600:	33 1f       	adc	r19, r19
    1602:	22 0f       	add	r18, r18
    1604:	33 1f       	adc	r19, r19
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	b8 01       	movw	r22, r16
    160c:	8c 53       	subi	r24, 0x3C	; 60
    160e:	9a 4f       	sbci	r25, 0xFA	; 250
    1610:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    1614:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1618:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    161c:	9e 89       	ldd	r25, Y+22	; 0x16
    161e:	86 89       	ldd	r24, Z+22	; 0x16
    1620:	98 17       	cp	r25, r24
    1622:	08 f4       	brcc	.+2      	; 0x1626 <xTaskIncrementTick+0x116>
    1624:	b2 cf       	rjmp	.-156    	; 0x158a <xTaskIncrementTick+0x7a>
    1626:	dc 2c       	mov	r13, r12
    1628:	b0 cf       	rjmp	.-160    	; 0x158a <xTaskIncrementTick+0x7a>
    162a:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    162e:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1632:	86 89       	ldd	r24, Z+22	; 0x16
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	fc 01       	movw	r30, r24
    1638:	ee 0f       	add	r30, r30
    163a:	ff 1f       	adc	r31, r31
    163c:	ee 0f       	add	r30, r30
    163e:	ff 1f       	adc	r31, r31
    1640:	ee 0f       	add	r30, r30
    1642:	ff 1f       	adc	r31, r31
    1644:	8e 0f       	add	r24, r30
    1646:	9f 1f       	adc	r25, r31
    1648:	fc 01       	movw	r30, r24
    164a:	ec 53       	subi	r30, 0x3C	; 60
    164c:	fa 4f       	sbci	r31, 0xFA	; 250
    164e:	80 81       	ld	r24, Z
    1650:	82 30       	cpi	r24, 0x02	; 2
    1652:	48 f0       	brcs	.+18     	; 0x1666 <xTaskIncrementTick+0x156>
    1654:	dd 24       	eor	r13, r13
    1656:	d3 94       	inc	r13
    1658:	06 c0       	rjmp	.+12     	; 0x1666 <xTaskIncrementTick+0x156>
    165a:	80 91 95 05 	lds	r24, 0x0595	; 0x800595 <uxPendedTicks>
    165e:	8f 5f       	subi	r24, 0xFF	; 255
    1660:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <uxPendedTicks>
    1664:	d1 2c       	mov	r13, r1
    1666:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <xYieldPending>
    166a:	88 23       	and	r24, r24
    166c:	11 f0       	breq	.+4      	; 0x1672 <xTaskIncrementTick+0x162>
    166e:	dd 24       	eor	r13, r13
    1670:	d3 94       	inc	r13
    1672:	8d 2d       	mov	r24, r13
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	0f 91       	pop	r16
    167c:	ff 90       	pop	r15
    167e:	ef 90       	pop	r14
    1680:	df 90       	pop	r13
    1682:	cf 90       	pop	r12
    1684:	08 95       	ret

00001686 <xTaskResumeAll>:
    1686:	df 92       	push	r13
    1688:	ef 92       	push	r14
    168a:	ff 92       	push	r15
    168c:	0f 93       	push	r16
    168e:	1f 93       	push	r17
    1690:	cf 93       	push	r28
    1692:	df 93       	push	r29
    1694:	0f b6       	in	r0, 0x3f	; 63
    1696:	f8 94       	cli
    1698:	0f 92       	push	r0
    169a:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    169e:	81 50       	subi	r24, 0x01	; 1
    16a0:	80 93 8d 05 	sts	0x058D, r24	; 0x80058d <uxSchedulerSuspended>
    16a4:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    16a8:	81 11       	cpse	r24, r1
    16aa:	5f c0       	rjmp	.+190    	; 0x176a <xTaskResumeAll+0xe4>
    16ac:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <uxCurrentNumberOfTasks>
    16b0:	81 11       	cpse	r24, r1
    16b2:	33 c0       	rjmp	.+102    	; 0x171a <xTaskResumeAll+0x94>
    16b4:	5d c0       	rjmp	.+186    	; 0x1770 <xTaskResumeAll+0xea>
    16b6:	d7 01       	movw	r26, r14
    16b8:	15 96       	adiw	r26, 0x05	; 5
    16ba:	ed 91       	ld	r30, X+
    16bc:	fc 91       	ld	r31, X
    16be:	16 97       	sbiw	r26, 0x06	; 6
    16c0:	c6 81       	ldd	r28, Z+6	; 0x06
    16c2:	d7 81       	ldd	r29, Z+7	; 0x07
    16c4:	ce 01       	movw	r24, r28
    16c6:	0c 96       	adiw	r24, 0x0c	; 12
    16c8:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    16cc:	8e 01       	movw	r16, r28
    16ce:	0e 5f       	subi	r16, 0xFE	; 254
    16d0:	1f 4f       	sbci	r17, 0xFF	; 255
    16d2:	c8 01       	movw	r24, r16
    16d4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    16d8:	8e 89       	ldd	r24, Y+22	; 0x16
    16da:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    16de:	98 17       	cp	r25, r24
    16e0:	10 f4       	brcc	.+4      	; 0x16e6 <xTaskResumeAll+0x60>
    16e2:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9c 01       	movw	r18, r24
    16ea:	22 0f       	add	r18, r18
    16ec:	33 1f       	adc	r19, r19
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	82 0f       	add	r24, r18
    16f8:	93 1f       	adc	r25, r19
    16fa:	b8 01       	movw	r22, r16
    16fc:	8c 53       	subi	r24, 0x3C	; 60
    16fe:	9a 4f       	sbci	r25, 0xFA	; 250
    1700:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    1704:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1708:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    170c:	9e 89       	ldd	r25, Y+22	; 0x16
    170e:	86 89       	ldd	r24, Z+22	; 0x16
    1710:	98 17       	cp	r25, r24
    1712:	68 f0       	brcs	.+26     	; 0x172e <xTaskResumeAll+0xa8>
    1714:	d0 92 94 05 	sts	0x0594, r13	; 0x800594 <xYieldPending>
    1718:	0a c0       	rjmp	.+20     	; 0x172e <xTaskResumeAll+0xa8>
    171a:	c0 e0       	ldi	r28, 0x00	; 0
    171c:	d0 e0       	ldi	r29, 0x00	; 0
    171e:	0f 2e       	mov	r0, r31
    1720:	f5 ea       	ldi	r31, 0xA5	; 165
    1722:	ef 2e       	mov	r14, r31
    1724:	f5 e0       	ldi	r31, 0x05	; 5
    1726:	ff 2e       	mov	r15, r31
    1728:	f0 2d       	mov	r31, r0
    172a:	dd 24       	eor	r13, r13
    172c:	d3 94       	inc	r13
    172e:	f7 01       	movw	r30, r14
    1730:	80 81       	ld	r24, Z
    1732:	81 11       	cpse	r24, r1
    1734:	c0 cf       	rjmp	.-128    	; 0x16b6 <xTaskResumeAll+0x30>
    1736:	cd 2b       	or	r28, r29
    1738:	11 f0       	breq	.+4      	; 0x173e <xTaskResumeAll+0xb8>
    173a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <prvResetNextTaskUnblockTime>
    173e:	c0 91 95 05 	lds	r28, 0x0595	; 0x800595 <uxPendedTicks>
    1742:	cc 23       	and	r28, r28
    1744:	51 f0       	breq	.+20     	; 0x175a <xTaskResumeAll+0xd4>
    1746:	d1 e0       	ldi	r29, 0x01	; 1
    1748:	0e 94 88 0a 	call	0x1510	; 0x1510 <xTaskIncrementTick>
    174c:	81 11       	cpse	r24, r1
    174e:	d0 93 94 05 	sts	0x0594, r29	; 0x800594 <xYieldPending>
    1752:	c1 50       	subi	r28, 0x01	; 1
    1754:	c9 f7       	brne	.-14     	; 0x1748 <xTaskResumeAll+0xc2>
    1756:	10 92 95 05 	sts	0x0595, r1	; 0x800595 <uxPendedTicks>
    175a:	80 91 94 05 	lds	r24, 0x0594	; 0x800594 <xYieldPending>
    175e:	88 23       	and	r24, r24
    1760:	31 f0       	breq	.+12     	; 0x176e <xTaskResumeAll+0xe8>
    1762:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	03 c0       	rjmp	.+6      	; 0x1770 <xTaskResumeAll+0xea>
    176a:	80 e0       	ldi	r24, 0x00	; 0
    176c:	01 c0       	rjmp	.+2      	; 0x1770 <xTaskResumeAll+0xea>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	1f 91       	pop	r17
    177a:	0f 91       	pop	r16
    177c:	ff 90       	pop	r15
    177e:	ef 90       	pop	r14
    1780:	df 90       	pop	r13
    1782:	08 95       	ret

00001784 <vTaskDelay>:
    1784:	cf 93       	push	r28
    1786:	df 93       	push	r29
    1788:	ec 01       	movw	r28, r24
    178a:	89 2b       	or	r24, r25
    178c:	51 f0       	breq	.+20     	; 0x17a2 <vTaskDelay+0x1e>
    178e:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskSuspendAll>
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	ce 01       	movw	r24, r28
    1796:	0e 94 ff 08 	call	0x11fe	; 0x11fe <prvAddCurrentTaskToDelayedList>
    179a:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
    179e:	81 11       	cpse	r24, r1
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <vTaskDelay+0x22>
    17a2:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    17a6:	df 91       	pop	r29
    17a8:	cf 91       	pop	r28
    17aa:	08 95       	ret

000017ac <prvIdleTask>:
    17ac:	0c e9       	ldi	r16, 0x9C	; 156
    17ae:	15 e0       	ldi	r17, 0x05	; 5
    17b0:	0f 2e       	mov	r0, r31
    17b2:	f4 ec       	ldi	r31, 0xC4	; 196
    17b4:	ef 2e       	mov	r14, r31
    17b6:	f5 e0       	ldi	r31, 0x05	; 5
    17b8:	ff 2e       	mov	r15, r31
    17ba:	f0 2d       	mov	r31, r0
    17bc:	29 c0       	rjmp	.+82     	; 0x1810 <prvIdleTask+0x64>
    17be:	0e 94 82 0a 	call	0x1504	; 0x1504 <vTaskSuspendAll>
    17c2:	d8 01       	movw	r26, r16
    17c4:	cc 91       	ld	r28, X
    17c6:	0e 94 43 0b 	call	0x1686	; 0x1686 <xTaskResumeAll>
    17ca:	cc 23       	and	r28, r28
    17cc:	09 f1       	breq	.+66     	; 0x1810 <prvIdleTask+0x64>
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	0f 92       	push	r0
    17d4:	d8 01       	movw	r26, r16
    17d6:	15 96       	adiw	r26, 0x05	; 5
    17d8:	ed 91       	ld	r30, X+
    17da:	fc 91       	ld	r31, X
    17dc:	16 97       	sbiw	r26, 0x06	; 6
    17de:	c6 81       	ldd	r28, Z+6	; 0x06
    17e0:	d7 81       	ldd	r29, Z+7	; 0x07
    17e2:	ce 01       	movw	r24, r28
    17e4:	02 96       	adiw	r24, 0x02	; 2
    17e6:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    17ea:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <uxCurrentNumberOfTasks>
    17ee:	81 50       	subi	r24, 0x01	; 1
    17f0:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <uxCurrentNumberOfTasks>
    17f4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <uxDeletedTasksWaitingCleanUp>
    17f8:	81 50       	subi	r24, 0x01	; 1
    17fa:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <uxDeletedTasksWaitingCleanUp>
    17fe:	0f 90       	pop	r0
    1800:	0f be       	out	0x3f, r0	; 63
    1802:	8f 89       	ldd	r24, Y+23	; 0x17
    1804:	98 8d       	ldd	r25, Y+24	; 0x18
    1806:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 21 04 	call	0x842	; 0x842 <vPortFree>
    1810:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <uxDeletedTasksWaitingCleanUp>
    1814:	81 11       	cpse	r24, r1
    1816:	d3 cf       	rjmp	.-90     	; 0x17be <prvIdleTask+0x12>
    1818:	f7 01       	movw	r30, r14
    181a:	80 81       	ld	r24, Z
    181c:	82 30       	cpi	r24, 0x02	; 2
    181e:	10 f0       	brcs	.+4      	; 0x1824 <prvIdleTask+0x78>
    1820:	0e 94 34 03 	call	0x668	; 0x668 <vPortYield>
    1824:	0e 94 e7 00 	call	0x1ce	; 0x1ce <vApplicationIdleHook>
    1828:	f3 cf       	rjmp	.-26     	; 0x1810 <prvIdleTask+0x64>

0000182a <vTaskSetApplicationTaskTag>:
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	21 f4       	brne	.+8      	; 0x1836 <vTaskSetApplicationTaskTag+0xc>
    182e:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1832:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1836:	0f b6       	in	r0, 0x3f	; 63
    1838:	f8 94       	cli
    183a:	0f 92       	push	r0
    183c:	fc 01       	movw	r30, r24
    183e:	76 a3       	std	Z+38, r23	; 0x26
    1840:	65 a3       	std	Z+37, r22	; 0x25
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	08 95       	ret

00001848 <vTaskSwitchContext>:
    1848:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    184c:	88 23       	and	r24, r24
    184e:	21 f0       	breq	.+8      	; 0x1858 <vTaskSwitchContext+0x10>
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    1856:	08 95       	ret
    1858:	10 92 94 05 	sts	0x0594, r1	; 0x800594 <xYieldPending>
    185c:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1860:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1864:	85 a1       	ldd	r24, Z+37	; 0x25
    1866:	0e 94 bd 01 	call	0x37a	; 0x37a <switch_out>
    186a:	20 91 97 05 	lds	r18, 0x0597	; 0x800597 <uxTopReadyPriority>
    186e:	82 2f       	mov	r24, r18
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	fc 01       	movw	r30, r24
    1874:	ee 0f       	add	r30, r30
    1876:	ff 1f       	adc	r31, r31
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	ee 0f       	add	r30, r30
    187e:	ff 1f       	adc	r31, r31
    1880:	e8 0f       	add	r30, r24
    1882:	f9 1f       	adc	r31, r25
    1884:	ec 53       	subi	r30, 0x3C	; 60
    1886:	fa 4f       	sbci	r31, 0xFA	; 250
    1888:	30 81       	ld	r19, Z
    188a:	31 11       	cpse	r19, r1
    188c:	11 c0       	rjmp	.+34     	; 0x18b0 <vTaskSwitchContext+0x68>
    188e:	21 50       	subi	r18, 0x01	; 1
    1890:	82 2f       	mov	r24, r18
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	e8 0f       	add	r30, r24
    18a4:	f9 1f       	adc	r31, r25
    18a6:	ec 53       	subi	r30, 0x3C	; 60
    18a8:	fa 4f       	sbci	r31, 0xFA	; 250
    18aa:	30 81       	ld	r19, Z
    18ac:	33 23       	and	r19, r19
    18ae:	79 f3       	breq	.-34     	; 0x188e <vTaskSwitchContext+0x46>
    18b0:	ac 01       	movw	r20, r24
    18b2:	44 0f       	add	r20, r20
    18b4:	55 1f       	adc	r21, r21
    18b6:	44 0f       	add	r20, r20
    18b8:	55 1f       	adc	r21, r21
    18ba:	44 0f       	add	r20, r20
    18bc:	55 1f       	adc	r21, r21
    18be:	48 0f       	add	r20, r24
    18c0:	59 1f       	adc	r21, r25
    18c2:	da 01       	movw	r26, r20
    18c4:	ac 53       	subi	r26, 0x3C	; 60
    18c6:	ba 4f       	sbci	r27, 0xFA	; 250
    18c8:	11 96       	adiw	r26, 0x01	; 1
    18ca:	ed 91       	ld	r30, X+
    18cc:	fc 91       	ld	r31, X
    18ce:	12 97       	sbiw	r26, 0x02	; 2
    18d0:	02 80       	ldd	r0, Z+2	; 0x02
    18d2:	f3 81       	ldd	r31, Z+3	; 0x03
    18d4:	e0 2d       	mov	r30, r0
    18d6:	12 96       	adiw	r26, 0x02	; 2
    18d8:	fc 93       	st	X, r31
    18da:	ee 93       	st	-X, r30
    18dc:	11 97       	sbiw	r26, 0x01	; 1
    18de:	49 53       	subi	r20, 0x39	; 57
    18e0:	5a 4f       	sbci	r21, 0xFA	; 250
    18e2:	e4 17       	cp	r30, r20
    18e4:	f5 07       	cpc	r31, r21
    18e6:	29 f4       	brne	.+10     	; 0x18f2 <vTaskSwitchContext+0xaa>
    18e8:	42 81       	ldd	r20, Z+2	; 0x02
    18ea:	53 81       	ldd	r21, Z+3	; 0x03
    18ec:	fd 01       	movw	r30, r26
    18ee:	52 83       	std	Z+2, r21	; 0x02
    18f0:	41 83       	std	Z+1, r20	; 0x01
    18f2:	fc 01       	movw	r30, r24
    18f4:	ee 0f       	add	r30, r30
    18f6:	ff 1f       	adc	r31, r31
    18f8:	ee 0f       	add	r30, r30
    18fa:	ff 1f       	adc	r31, r31
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	8e 0f       	add	r24, r30
    1902:	9f 1f       	adc	r25, r31
    1904:	fc 01       	movw	r30, r24
    1906:	ec 53       	subi	r30, 0x3C	; 60
    1908:	fa 4f       	sbci	r31, 0xFA	; 250
    190a:	01 80       	ldd	r0, Z+1	; 0x01
    190c:	f2 81       	ldd	r31, Z+2	; 0x02
    190e:	e0 2d       	mov	r30, r0
    1910:	86 81       	ldd	r24, Z+6	; 0x06
    1912:	97 81       	ldd	r25, Z+7	; 0x07
    1914:	90 93 e9 05 	sts	0x05E9, r25	; 0x8005e9 <pxCurrentTCB+0x1>
    1918:	80 93 e8 05 	sts	0x05E8, r24	; 0x8005e8 <pxCurrentTCB>
    191c:	20 93 97 05 	sts	0x0597, r18	; 0x800597 <uxTopReadyPriority>
    1920:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1924:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1928:	85 a1       	ldd	r24, Z+37	; 0x25
    192a:	0e 94 b2 01 	call	0x364	; 0x364 <switch_in>
    192e:	08 95       	ret

00001930 <vTaskPlaceOnEventList>:
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	eb 01       	movw	r28, r22
    1936:	60 91 e8 05 	lds	r22, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    193a:	70 91 e9 05 	lds	r23, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    193e:	64 5f       	subi	r22, 0xF4	; 244
    1940:	7f 4f       	sbci	r23, 0xFF	; 255
    1942:	0e 94 37 02 	call	0x46e	; 0x46e <vListInsert>
    1946:	61 e0       	ldi	r22, 0x01	; 1
    1948:	ce 01       	movw	r24, r28
    194a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <prvAddCurrentTaskToDelayedList>
    194e:	df 91       	pop	r29
    1950:	cf 91       	pop	r28
    1952:	08 95       	ret

00001954 <xTaskRemoveFromEventList>:
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	cf 93       	push	r28
    195a:	df 93       	push	r29
    195c:	dc 01       	movw	r26, r24
    195e:	15 96       	adiw	r26, 0x05	; 5
    1960:	ed 91       	ld	r30, X+
    1962:	fc 91       	ld	r31, X
    1964:	16 97       	sbiw	r26, 0x06	; 6
    1966:	c6 81       	ldd	r28, Z+6	; 0x06
    1968:	d7 81       	ldd	r29, Z+7	; 0x07
    196a:	8e 01       	movw	r16, r28
    196c:	04 5f       	subi	r16, 0xF4	; 244
    196e:	1f 4f       	sbci	r17, 0xFF	; 255
    1970:	c8 01       	movw	r24, r16
    1972:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    1976:	80 91 8d 05 	lds	r24, 0x058D	; 0x80058d <uxSchedulerSuspended>
    197a:	81 11       	cpse	r24, r1
    197c:	1c c0       	rjmp	.+56     	; 0x19b6 <xTaskRemoveFromEventList+0x62>
    197e:	0a 50       	subi	r16, 0x0A	; 10
    1980:	11 09       	sbc	r17, r1
    1982:	c8 01       	movw	r24, r16
    1984:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    1988:	8e 89       	ldd	r24, Y+22	; 0x16
    198a:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    198e:	98 17       	cp	r25, r24
    1990:	10 f4       	brcc	.+4      	; 0x1996 <xTaskRemoveFromEventList+0x42>
    1992:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	9c 01       	movw	r18, r24
    199a:	22 0f       	add	r18, r18
    199c:	33 1f       	adc	r19, r19
    199e:	22 0f       	add	r18, r18
    19a0:	33 1f       	adc	r19, r19
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	82 0f       	add	r24, r18
    19a8:	93 1f       	adc	r25, r19
    19aa:	b8 01       	movw	r22, r16
    19ac:	8c 53       	subi	r24, 0x3C	; 60
    19ae:	9a 4f       	sbci	r25, 0xFA	; 250
    19b0:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    19b4:	05 c0       	rjmp	.+10     	; 0x19c0 <xTaskRemoveFromEventList+0x6c>
    19b6:	b8 01       	movw	r22, r16
    19b8:	85 ea       	ldi	r24, 0xA5	; 165
    19ba:	95 e0       	ldi	r25, 0x05	; 5
    19bc:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    19c0:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    19c4:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    19c8:	9e 89       	ldd	r25, Y+22	; 0x16
    19ca:	86 89       	ldd	r24, Z+22	; 0x16
    19cc:	89 17       	cp	r24, r25
    19ce:	20 f4       	brcc	.+8      	; 0x19d8 <xTaskRemoveFromEventList+0x84>
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    19d6:	01 c0       	rjmp	.+2      	; 0x19da <xTaskRemoveFromEventList+0x86>
    19d8:	80 e0       	ldi	r24, 0x00	; 0
    19da:	df 91       	pop	r29
    19dc:	cf 91       	pop	r28
    19de:	1f 91       	pop	r17
    19e0:	0f 91       	pop	r16
    19e2:	08 95       	ret

000019e4 <vTaskSetTimeOutState>:
    19e4:	20 91 93 05 	lds	r18, 0x0593	; 0x800593 <xNumOfOverflows>
    19e8:	fc 01       	movw	r30, r24
    19ea:	20 83       	st	Z, r18
    19ec:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <xTickCount>
    19f0:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <xTickCount+0x1>
    19f4:	32 83       	std	Z+2, r19	; 0x02
    19f6:	21 83       	std	Z+1, r18	; 0x01
    19f8:	08 95       	ret

000019fa <xTaskCheckForTimeOut>:
    19fa:	cf 93       	push	r28
    19fc:	df 93       	push	r29
    19fe:	fc 01       	movw	r30, r24
    1a00:	0f b6       	in	r0, 0x3f	; 63
    1a02:	f8 94       	cli
    1a04:	0f 92       	push	r0
    1a06:	20 91 98 05 	lds	r18, 0x0598	; 0x800598 <xTickCount>
    1a0a:	30 91 99 05 	lds	r19, 0x0599	; 0x800599 <xTickCount+0x1>
    1a0e:	80 91 93 05 	lds	r24, 0x0593	; 0x800593 <xNumOfOverflows>
    1a12:	90 81       	ld	r25, Z
    1a14:	98 17       	cp	r25, r24
    1a16:	29 f0       	breq	.+10     	; 0x1a22 <xTaskCheckForTimeOut+0x28>
    1a18:	81 81       	ldd	r24, Z+1	; 0x01
    1a1a:	92 81       	ldd	r25, Z+2	; 0x02
    1a1c:	28 17       	cp	r18, r24
    1a1e:	39 07       	cpc	r19, r25
    1a20:	b0 f4       	brcc	.+44     	; 0x1a4e <xTaskCheckForTimeOut+0x54>
    1a22:	a1 81       	ldd	r26, Z+1	; 0x01
    1a24:	b2 81       	ldd	r27, Z+2	; 0x02
    1a26:	eb 01       	movw	r28, r22
    1a28:	48 81       	ld	r20, Y
    1a2a:	59 81       	ldd	r21, Y+1	; 0x01
    1a2c:	c9 01       	movw	r24, r18
    1a2e:	8a 1b       	sub	r24, r26
    1a30:	9b 0b       	sbc	r25, r27
    1a32:	84 17       	cp	r24, r20
    1a34:	95 07       	cpc	r25, r21
    1a36:	68 f4       	brcc	.+26     	; 0x1a52 <xTaskCheckForTimeOut+0x58>
    1a38:	cf 01       	movw	r24, r30
    1a3a:	a2 1b       	sub	r26, r18
    1a3c:	b3 0b       	sbc	r27, r19
    1a3e:	4a 0f       	add	r20, r26
    1a40:	5b 1f       	adc	r21, r27
    1a42:	59 83       	std	Y+1, r21	; 0x01
    1a44:	48 83       	st	Y, r20
    1a46:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <vTaskSetTimeOutState>
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	03 c0       	rjmp	.+6      	; 0x1a54 <xTaskCheckForTimeOut+0x5a>
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	01 c0       	rjmp	.+2      	; 0x1a54 <xTaskCheckForTimeOut+0x5a>
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	0f 90       	pop	r0
    1a56:	0f be       	out	0x3f, r0	; 63
    1a58:	df 91       	pop	r29
    1a5a:	cf 91       	pop	r28
    1a5c:	08 95       	ret

00001a5e <vTaskMissedYield>:
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	80 93 94 05 	sts	0x0594, r24	; 0x800594 <xYieldPending>
    1a64:	08 95       	ret

00001a66 <vTaskPriorityInherit>:
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	fc 01       	movw	r30, r24
    1a70:	89 2b       	or	r24, r25
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vTaskPriorityInherit+0x10>
    1a74:	55 c0       	rjmp	.+170    	; 0x1b20 <vTaskPriorityInherit+0xba>
    1a76:	26 89       	ldd	r18, Z+22	; 0x16
    1a78:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1a7c:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1a80:	56 96       	adiw	r26, 0x16	; 22
    1a82:	8c 91       	ld	r24, X
    1a84:	28 17       	cp	r18, r24
    1a86:	08 f0       	brcs	.+2      	; 0x1a8a <vTaskPriorityInherit+0x24>
    1a88:	4b c0       	rjmp	.+150    	; 0x1b20 <vTaskPriorityInherit+0xba>
    1a8a:	84 85       	ldd	r24, Z+12	; 0x0c
    1a8c:	95 85       	ldd	r25, Z+13	; 0x0d
    1a8e:	99 23       	and	r25, r25
    1a90:	64 f0       	brlt	.+24     	; 0x1aaa <vTaskPriorityInherit+0x44>
    1a92:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1a96:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1a9a:	56 96       	adiw	r26, 0x16	; 22
    1a9c:	3c 91       	ld	r19, X
    1a9e:	84 e0       	ldi	r24, 0x04	; 4
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	83 1b       	sub	r24, r19
    1aa4:	91 09       	sbc	r25, r1
    1aa6:	95 87       	std	Z+13, r25	; 0x0d
    1aa8:	84 87       	std	Z+12, r24	; 0x0c
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	c9 01       	movw	r24, r18
    1aae:	88 0f       	add	r24, r24
    1ab0:	99 1f       	adc	r25, r25
    1ab2:	88 0f       	add	r24, r24
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	28 0f       	add	r18, r24
    1abc:	39 1f       	adc	r19, r25
    1abe:	2c 53       	subi	r18, 0x3C	; 60
    1ac0:	3a 4f       	sbci	r19, 0xFA	; 250
    1ac2:	82 85       	ldd	r24, Z+10	; 0x0a
    1ac4:	93 85       	ldd	r25, Z+11	; 0x0b
    1ac6:	82 17       	cp	r24, r18
    1ac8:	93 07       	cpc	r25, r19
    1aca:	19 f5       	brne	.+70     	; 0x1b12 <vTaskPriorityInherit+0xac>
    1acc:	8f 01       	movw	r16, r30
    1ace:	ef 01       	movw	r28, r30
    1ad0:	22 96       	adiw	r28, 0x02	; 2
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    1ad8:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1adc:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1ae0:	86 89       	ldd	r24, Z+22	; 0x16
    1ae2:	f8 01       	movw	r30, r16
    1ae4:	86 8b       	std	Z+22, r24	; 0x16
    1ae6:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    1aea:	98 17       	cp	r25, r24
    1aec:	10 f4       	brcc	.+4      	; 0x1af2 <vTaskPriorityInherit+0x8c>
    1aee:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	9c 01       	movw	r18, r24
    1af6:	22 0f       	add	r18, r18
    1af8:	33 1f       	adc	r19, r19
    1afa:	22 0f       	add	r18, r18
    1afc:	33 1f       	adc	r19, r19
    1afe:	22 0f       	add	r18, r18
    1b00:	33 1f       	adc	r19, r19
    1b02:	82 0f       	add	r24, r18
    1b04:	93 1f       	adc	r25, r19
    1b06:	be 01       	movw	r22, r28
    1b08:	8c 53       	subi	r24, 0x3C	; 60
    1b0a:	9a 4f       	sbci	r25, 0xFA	; 250
    1b0c:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    1b10:	07 c0       	rjmp	.+14     	; 0x1b20 <vTaskPriorityInherit+0xba>
    1b12:	a0 91 e8 05 	lds	r26, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1b16:	b0 91 e9 05 	lds	r27, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1b1a:	56 96       	adiw	r26, 0x16	; 22
    1b1c:	8c 91       	ld	r24, X
    1b1e:	86 8b       	std	Z+22, r24	; 0x16
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	08 95       	ret

00001b2a <xTaskPriorityDisinherit>:
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	fc 01       	movw	r30, r24
    1b34:	89 2b       	or	r24, r25
    1b36:	79 f1       	breq	.+94     	; 0x1b96 <xTaskPriorityDisinherit+0x6c>
    1b38:	84 a1       	ldd	r24, Z+36	; 0x24
    1b3a:	81 50       	subi	r24, 0x01	; 1
    1b3c:	84 a3       	std	Z+36, r24	; 0x24
    1b3e:	26 89       	ldd	r18, Z+22	; 0x16
    1b40:	93 a1       	ldd	r25, Z+35	; 0x23
    1b42:	29 17       	cp	r18, r25
    1b44:	51 f1       	breq	.+84     	; 0x1b9a <xTaskPriorityDisinherit+0x70>
    1b46:	81 11       	cpse	r24, r1
    1b48:	2a c0       	rjmp	.+84     	; 0x1b9e <xTaskPriorityDisinherit+0x74>
    1b4a:	ef 01       	movw	r28, r30
    1b4c:	8f 01       	movw	r16, r30
    1b4e:	0e 5f       	subi	r16, 0xFE	; 254
    1b50:	1f 4f       	sbci	r17, 0xFF	; 255
    1b52:	c8 01       	movw	r24, r16
    1b54:	0e 94 68 02 	call	0x4d0	; 0x4d0 <uxListRemove>
    1b58:	8b a1       	ldd	r24, Y+35	; 0x23
    1b5a:	8e 8b       	std	Y+22, r24	; 0x16
    1b5c:	24 e0       	ldi	r18, 0x04	; 4
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	28 1b       	sub	r18, r24
    1b62:	31 09       	sbc	r19, r1
    1b64:	3d 87       	std	Y+13, r19	; 0x0d
    1b66:	2c 87       	std	Y+12, r18	; 0x0c
    1b68:	90 91 97 05 	lds	r25, 0x0597	; 0x800597 <uxTopReadyPriority>
    1b6c:	98 17       	cp	r25, r24
    1b6e:	10 f4       	brcc	.+4      	; 0x1b74 <xTaskPriorityDisinherit+0x4a>
    1b70:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <uxTopReadyPriority>
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	9c 01       	movw	r18, r24
    1b78:	22 0f       	add	r18, r18
    1b7a:	33 1f       	adc	r19, r19
    1b7c:	22 0f       	add	r18, r18
    1b7e:	33 1f       	adc	r19, r19
    1b80:	22 0f       	add	r18, r18
    1b82:	33 1f       	adc	r19, r19
    1b84:	82 0f       	add	r24, r18
    1b86:	93 1f       	adc	r25, r19
    1b88:	b8 01       	movw	r22, r16
    1b8a:	8c 53       	subi	r24, 0x3C	; 60
    1b8c:	9a 4f       	sbci	r25, 0xFA	; 250
    1b8e:	0e 94 16 02 	call	0x42c	; 0x42c <vListInsertEnd>
    1b92:	81 e0       	ldi	r24, 0x01	; 1
    1b94:	05 c0       	rjmp	.+10     	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	03 c0       	rjmp	.+6      	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	01 c0       	rjmp	.+2      	; 0x1ba0 <xTaskPriorityDisinherit+0x76>
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
    1baa:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1bae:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1bb2:	89 2b       	or	r24, r25
    1bb4:	39 f0       	breq	.+14     	; 0x1bc4 <pvTaskIncrementMutexHeldCount+0x1a>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
    1bb6:	e0 91 e8 05 	lds	r30, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1bba:	f0 91 e9 05 	lds	r31, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
    1bbe:	84 a1       	ldd	r24, Z+36	; 0x24
    1bc0:	8f 5f       	subi	r24, 0xFF	; 255
    1bc2:	84 a3       	std	Z+36, r24	; 0x24
		}

		return pxCurrentTCB;
    1bc4:	80 91 e8 05 	lds	r24, 0x05E8	; 0x8005e8 <pxCurrentTCB>
    1bc8:	90 91 e9 05 	lds	r25, 0x05E9	; 0x8005e9 <pxCurrentTCB+0x1>
	}
    1bcc:	08 95       	ret

00001bce <__udivmodsi4>:
    1bce:	a1 e2       	ldi	r26, 0x21	; 33
    1bd0:	1a 2e       	mov	r1, r26
    1bd2:	aa 1b       	sub	r26, r26
    1bd4:	bb 1b       	sub	r27, r27
    1bd6:	fd 01       	movw	r30, r26
    1bd8:	0d c0       	rjmp	.+26     	; 0x1bf4 <__udivmodsi4_ep>

00001bda <__udivmodsi4_loop>:
    1bda:	aa 1f       	adc	r26, r26
    1bdc:	bb 1f       	adc	r27, r27
    1bde:	ee 1f       	adc	r30, r30
    1be0:	ff 1f       	adc	r31, r31
    1be2:	a2 17       	cp	r26, r18
    1be4:	b3 07       	cpc	r27, r19
    1be6:	e4 07       	cpc	r30, r20
    1be8:	f5 07       	cpc	r31, r21
    1bea:	20 f0       	brcs	.+8      	; 0x1bf4 <__udivmodsi4_ep>
    1bec:	a2 1b       	sub	r26, r18
    1bee:	b3 0b       	sbc	r27, r19
    1bf0:	e4 0b       	sbc	r30, r20
    1bf2:	f5 0b       	sbc	r31, r21

00001bf4 <__udivmodsi4_ep>:
    1bf4:	66 1f       	adc	r22, r22
    1bf6:	77 1f       	adc	r23, r23
    1bf8:	88 1f       	adc	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	1a 94       	dec	r1
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <__udivmodsi4_loop>
    1c00:	60 95       	com	r22
    1c02:	70 95       	com	r23
    1c04:	80 95       	com	r24
    1c06:	90 95       	com	r25
    1c08:	9b 01       	movw	r18, r22
    1c0a:	ac 01       	movw	r20, r24
    1c0c:	bd 01       	movw	r22, r26
    1c0e:	cf 01       	movw	r24, r30
    1c10:	08 95       	ret

00001c12 <malloc>:
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	82 30       	cpi	r24, 0x02	; 2
    1c1c:	91 05       	cpc	r25, r1
    1c1e:	10 f4       	brcc	.+4      	; 0x1c24 <malloc+0x12>
    1c20:	82 e0       	ldi	r24, 0x02	; 2
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	e0 91 ec 05 	lds	r30, 0x05EC	; 0x8005ec <__flp>
    1c28:	f0 91 ed 05 	lds	r31, 0x05ED	; 0x8005ed <__flp+0x1>
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	a0 e0       	ldi	r26, 0x00	; 0
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	30 97       	sbiw	r30, 0x00	; 0
    1c36:	19 f1       	breq	.+70     	; 0x1c7e <malloc+0x6c>
    1c38:	40 81       	ld	r20, Z
    1c3a:	51 81       	ldd	r21, Z+1	; 0x01
    1c3c:	02 81       	ldd	r16, Z+2	; 0x02
    1c3e:	13 81       	ldd	r17, Z+3	; 0x03
    1c40:	48 17       	cp	r20, r24
    1c42:	59 07       	cpc	r21, r25
    1c44:	c8 f0       	brcs	.+50     	; 0x1c78 <malloc+0x66>
    1c46:	84 17       	cp	r24, r20
    1c48:	95 07       	cpc	r25, r21
    1c4a:	69 f4       	brne	.+26     	; 0x1c66 <malloc+0x54>
    1c4c:	10 97       	sbiw	r26, 0x00	; 0
    1c4e:	31 f0       	breq	.+12     	; 0x1c5c <malloc+0x4a>
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	0c 93       	st	X, r16
    1c54:	12 97       	sbiw	r26, 0x02	; 2
    1c56:	13 96       	adiw	r26, 0x03	; 3
    1c58:	1c 93       	st	X, r17
    1c5a:	27 c0       	rjmp	.+78     	; 0x1caa <malloc+0x98>
    1c5c:	00 93 ec 05 	sts	0x05EC, r16	; 0x8005ec <__flp>
    1c60:	10 93 ed 05 	sts	0x05ED, r17	; 0x8005ed <__flp+0x1>
    1c64:	22 c0       	rjmp	.+68     	; 0x1caa <malloc+0x98>
    1c66:	21 15       	cp	r18, r1
    1c68:	31 05       	cpc	r19, r1
    1c6a:	19 f0       	breq	.+6      	; 0x1c72 <malloc+0x60>
    1c6c:	42 17       	cp	r20, r18
    1c6e:	53 07       	cpc	r21, r19
    1c70:	18 f4       	brcc	.+6      	; 0x1c78 <malloc+0x66>
    1c72:	9a 01       	movw	r18, r20
    1c74:	bd 01       	movw	r22, r26
    1c76:	ef 01       	movw	r28, r30
    1c78:	df 01       	movw	r26, r30
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	db cf       	rjmp	.-74     	; 0x1c34 <malloc+0x22>
    1c7e:	21 15       	cp	r18, r1
    1c80:	31 05       	cpc	r19, r1
    1c82:	f9 f0       	breq	.+62     	; 0x1cc2 <malloc+0xb0>
    1c84:	28 1b       	sub	r18, r24
    1c86:	39 0b       	sbc	r19, r25
    1c88:	24 30       	cpi	r18, 0x04	; 4
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	80 f4       	brcc	.+32     	; 0x1cae <malloc+0x9c>
    1c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c90:	9b 81       	ldd	r25, Y+3	; 0x03
    1c92:	61 15       	cp	r22, r1
    1c94:	71 05       	cpc	r23, r1
    1c96:	21 f0       	breq	.+8      	; 0x1ca0 <malloc+0x8e>
    1c98:	fb 01       	movw	r30, r22
    1c9a:	93 83       	std	Z+3, r25	; 0x03
    1c9c:	82 83       	std	Z+2, r24	; 0x02
    1c9e:	04 c0       	rjmp	.+8      	; 0x1ca8 <malloc+0x96>
    1ca0:	90 93 ed 05 	sts	0x05ED, r25	; 0x8005ed <__flp+0x1>
    1ca4:	80 93 ec 05 	sts	0x05EC, r24	; 0x8005ec <__flp>
    1ca8:	fe 01       	movw	r30, r28
    1caa:	32 96       	adiw	r30, 0x02	; 2
    1cac:	44 c0       	rjmp	.+136    	; 0x1d36 <malloc+0x124>
    1cae:	fe 01       	movw	r30, r28
    1cb0:	e2 0f       	add	r30, r18
    1cb2:	f3 1f       	adc	r31, r19
    1cb4:	81 93       	st	Z+, r24
    1cb6:	91 93       	st	Z+, r25
    1cb8:	22 50       	subi	r18, 0x02	; 2
    1cba:	31 09       	sbc	r19, r1
    1cbc:	39 83       	std	Y+1, r19	; 0x01
    1cbe:	28 83       	st	Y, r18
    1cc0:	3a c0       	rjmp	.+116    	; 0x1d36 <malloc+0x124>
    1cc2:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <__brkval>
    1cc6:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <__brkval+0x1>
    1cca:	23 2b       	or	r18, r19
    1ccc:	41 f4       	brne	.+16     	; 0x1cde <malloc+0xcc>
    1cce:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    1cd2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    1cd6:	30 93 eb 05 	sts	0x05EB, r19	; 0x8005eb <__brkval+0x1>
    1cda:	20 93 ea 05 	sts	0x05EA, r18	; 0x8005ea <__brkval>
    1cde:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1ce2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1ce6:	21 15       	cp	r18, r1
    1ce8:	31 05       	cpc	r19, r1
    1cea:	41 f4       	brne	.+16     	; 0x1cfc <malloc+0xea>
    1cec:	2d b7       	in	r18, 0x3d	; 61
    1cee:	3e b7       	in	r19, 0x3e	; 62
    1cf0:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    1cf4:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    1cf8:	24 1b       	sub	r18, r20
    1cfa:	35 0b       	sbc	r19, r21
    1cfc:	e0 91 ea 05 	lds	r30, 0x05EA	; 0x8005ea <__brkval>
    1d00:	f0 91 eb 05 	lds	r31, 0x05EB	; 0x8005eb <__brkval+0x1>
    1d04:	e2 17       	cp	r30, r18
    1d06:	f3 07       	cpc	r31, r19
    1d08:	a0 f4       	brcc	.+40     	; 0x1d32 <malloc+0x120>
    1d0a:	2e 1b       	sub	r18, r30
    1d0c:	3f 0b       	sbc	r19, r31
    1d0e:	28 17       	cp	r18, r24
    1d10:	39 07       	cpc	r19, r25
    1d12:	78 f0       	brcs	.+30     	; 0x1d32 <malloc+0x120>
    1d14:	ac 01       	movw	r20, r24
    1d16:	4e 5f       	subi	r20, 0xFE	; 254
    1d18:	5f 4f       	sbci	r21, 0xFF	; 255
    1d1a:	24 17       	cp	r18, r20
    1d1c:	35 07       	cpc	r19, r21
    1d1e:	48 f0       	brcs	.+18     	; 0x1d32 <malloc+0x120>
    1d20:	4e 0f       	add	r20, r30
    1d22:	5f 1f       	adc	r21, r31
    1d24:	50 93 eb 05 	sts	0x05EB, r21	; 0x8005eb <__brkval+0x1>
    1d28:	40 93 ea 05 	sts	0x05EA, r20	; 0x8005ea <__brkval>
    1d2c:	81 93       	st	Z+, r24
    1d2e:	91 93       	st	Z+, r25
    1d30:	02 c0       	rjmp	.+4      	; 0x1d36 <malloc+0x124>
    1d32:	e0 e0       	ldi	r30, 0x00	; 0
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	cf 01       	movw	r24, r30
    1d38:	df 91       	pop	r29
    1d3a:	cf 91       	pop	r28
    1d3c:	1f 91       	pop	r17
    1d3e:	0f 91       	pop	r16
    1d40:	08 95       	ret

00001d42 <free>:
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	09 f4       	brne	.+2      	; 0x1d4c <free+0xa>
    1d4a:	81 c0       	rjmp	.+258    	; 0x1e4e <free+0x10c>
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	32 97       	sbiw	r30, 0x02	; 2
    1d50:	13 82       	std	Z+3, r1	; 0x03
    1d52:	12 82       	std	Z+2, r1	; 0x02
    1d54:	a0 91 ec 05 	lds	r26, 0x05EC	; 0x8005ec <__flp>
    1d58:	b0 91 ed 05 	lds	r27, 0x05ED	; 0x8005ed <__flp+0x1>
    1d5c:	10 97       	sbiw	r26, 0x00	; 0
    1d5e:	81 f4       	brne	.+32     	; 0x1d80 <free+0x3e>
    1d60:	20 81       	ld	r18, Z
    1d62:	31 81       	ldd	r19, Z+1	; 0x01
    1d64:	82 0f       	add	r24, r18
    1d66:	93 1f       	adc	r25, r19
    1d68:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <__brkval>
    1d6c:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <__brkval+0x1>
    1d70:	28 17       	cp	r18, r24
    1d72:	39 07       	cpc	r19, r25
    1d74:	51 f5       	brne	.+84     	; 0x1dca <free+0x88>
    1d76:	f0 93 eb 05 	sts	0x05EB, r31	; 0x8005eb <__brkval+0x1>
    1d7a:	e0 93 ea 05 	sts	0x05EA, r30	; 0x8005ea <__brkval>
    1d7e:	67 c0       	rjmp	.+206    	; 0x1e4e <free+0x10c>
    1d80:	ed 01       	movw	r28, r26
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	ce 17       	cp	r28, r30
    1d88:	df 07       	cpc	r29, r31
    1d8a:	40 f4       	brcc	.+16     	; 0x1d9c <free+0x5a>
    1d8c:	4a 81       	ldd	r20, Y+2	; 0x02
    1d8e:	5b 81       	ldd	r21, Y+3	; 0x03
    1d90:	9e 01       	movw	r18, r28
    1d92:	41 15       	cp	r20, r1
    1d94:	51 05       	cpc	r21, r1
    1d96:	f1 f0       	breq	.+60     	; 0x1dd4 <free+0x92>
    1d98:	ea 01       	movw	r28, r20
    1d9a:	f5 cf       	rjmp	.-22     	; 0x1d86 <free+0x44>
    1d9c:	d3 83       	std	Z+3, r29	; 0x03
    1d9e:	c2 83       	std	Z+2, r28	; 0x02
    1da0:	40 81       	ld	r20, Z
    1da2:	51 81       	ldd	r21, Z+1	; 0x01
    1da4:	84 0f       	add	r24, r20
    1da6:	95 1f       	adc	r25, r21
    1da8:	c8 17       	cp	r28, r24
    1daa:	d9 07       	cpc	r29, r25
    1dac:	59 f4       	brne	.+22     	; 0x1dc4 <free+0x82>
    1dae:	88 81       	ld	r24, Y
    1db0:	99 81       	ldd	r25, Y+1	; 0x01
    1db2:	84 0f       	add	r24, r20
    1db4:	95 1f       	adc	r25, r21
    1db6:	02 96       	adiw	r24, 0x02	; 2
    1db8:	91 83       	std	Z+1, r25	; 0x01
    1dba:	80 83       	st	Z, r24
    1dbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc0:	93 83       	std	Z+3, r25	; 0x03
    1dc2:	82 83       	std	Z+2, r24	; 0x02
    1dc4:	21 15       	cp	r18, r1
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	29 f4       	brne	.+10     	; 0x1dd4 <free+0x92>
    1dca:	f0 93 ed 05 	sts	0x05ED, r31	; 0x8005ed <__flp+0x1>
    1dce:	e0 93 ec 05 	sts	0x05EC, r30	; 0x8005ec <__flp>
    1dd2:	3d c0       	rjmp	.+122    	; 0x1e4e <free+0x10c>
    1dd4:	e9 01       	movw	r28, r18
    1dd6:	fb 83       	std	Y+3, r31	; 0x03
    1dd8:	ea 83       	std	Y+2, r30	; 0x02
    1dda:	49 91       	ld	r20, Y+
    1ddc:	59 91       	ld	r21, Y+
    1dde:	c4 0f       	add	r28, r20
    1de0:	d5 1f       	adc	r29, r21
    1de2:	ec 17       	cp	r30, r28
    1de4:	fd 07       	cpc	r31, r29
    1de6:	61 f4       	brne	.+24     	; 0x1e00 <free+0xbe>
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	84 0f       	add	r24, r20
    1dee:	95 1f       	adc	r25, r21
    1df0:	02 96       	adiw	r24, 0x02	; 2
    1df2:	e9 01       	movw	r28, r18
    1df4:	99 83       	std	Y+1, r25	; 0x01
    1df6:	88 83       	st	Y, r24
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	9b 83       	std	Y+3, r25	; 0x03
    1dfe:	8a 83       	std	Y+2, r24	; 0x02
    1e00:	e0 e0       	ldi	r30, 0x00	; 0
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	12 96       	adiw	r26, 0x02	; 2
    1e06:	8d 91       	ld	r24, X+
    1e08:	9c 91       	ld	r25, X
    1e0a:	13 97       	sbiw	r26, 0x03	; 3
    1e0c:	00 97       	sbiw	r24, 0x00	; 0
    1e0e:	19 f0       	breq	.+6      	; 0x1e16 <free+0xd4>
    1e10:	fd 01       	movw	r30, r26
    1e12:	dc 01       	movw	r26, r24
    1e14:	f7 cf       	rjmp	.-18     	; 0x1e04 <free+0xc2>
    1e16:	8d 91       	ld	r24, X+
    1e18:	9c 91       	ld	r25, X
    1e1a:	11 97       	sbiw	r26, 0x01	; 1
    1e1c:	9d 01       	movw	r18, r26
    1e1e:	2e 5f       	subi	r18, 0xFE	; 254
    1e20:	3f 4f       	sbci	r19, 0xFF	; 255
    1e22:	82 0f       	add	r24, r18
    1e24:	93 1f       	adc	r25, r19
    1e26:	20 91 ea 05 	lds	r18, 0x05EA	; 0x8005ea <__brkval>
    1e2a:	30 91 eb 05 	lds	r19, 0x05EB	; 0x8005eb <__brkval+0x1>
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	69 f4       	brne	.+26     	; 0x1e4e <free+0x10c>
    1e34:	30 97       	sbiw	r30, 0x00	; 0
    1e36:	29 f4       	brne	.+10     	; 0x1e42 <free+0x100>
    1e38:	10 92 ed 05 	sts	0x05ED, r1	; 0x8005ed <__flp+0x1>
    1e3c:	10 92 ec 05 	sts	0x05EC, r1	; 0x8005ec <__flp>
    1e40:	02 c0       	rjmp	.+4      	; 0x1e46 <free+0x104>
    1e42:	13 82       	std	Z+3, r1	; 0x03
    1e44:	12 82       	std	Z+2, r1	; 0x02
    1e46:	b0 93 eb 05 	sts	0x05EB, r27	; 0x8005eb <__brkval+0x1>
    1e4a:	a0 93 ea 05 	sts	0x05EA, r26	; 0x8005ea <__brkval>
    1e4e:	df 91       	pop	r29
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <memcpy>:
    1e54:	fb 01       	movw	r30, r22
    1e56:	dc 01       	movw	r26, r24
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <memcpy+0xa>
    1e5a:	01 90       	ld	r0, Z+
    1e5c:	0d 92       	st	X+, r0
    1e5e:	41 50       	subi	r20, 0x01	; 1
    1e60:	50 40       	sbci	r21, 0x00	; 0
    1e62:	d8 f7       	brcc	.-10     	; 0x1e5a <memcpy+0x6>
    1e64:	08 95       	ret

00001e66 <memset>:
    1e66:	dc 01       	movw	r26, r24
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <memset+0x6>
    1e6a:	6d 93       	st	X+, r22
    1e6c:	41 50       	subi	r20, 0x01	; 1
    1e6e:	50 40       	sbci	r21, 0x00	; 0
    1e70:	e0 f7       	brcc	.-8      	; 0x1e6a <memset+0x4>
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
